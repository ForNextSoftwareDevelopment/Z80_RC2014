using System.Security.Cryptography;

namespace Z80_RC2014
{
    #region InstructionType

    // Type of instruction: (un)conditional jump/call/restart, halt or none
    public enum TYPE
    {
        NONE,
        CONDITIONALJUMP,
        CONDITIONALCALL,
        UNCONDITIONALJUMP,
        UNCONDITIONALCALL,
        CONDITIONALRETURN,
        UNCONDITIONALRETURN,
        CONDITIONALRESTART,
        UNCONDITIONALRESTART,
        HALT
    }

    #endregion

    #region Instruction

    // Instruction structure
    public readonly struct Instruction
    {
        public Instruction(int opcode, string mnemonic, string altmnemonic, int size, TYPE type, string description, string explanation)
        {
            Opcode = opcode;
            Mnemonic = mnemonic;
            AltMnemonic = altmnemonic;
            Size = size;
            Type = type;
            Description = description;
            Explanation = explanation;
        }

        public int Opcode { get; }

        public string Mnemonic { get; }

        public string AltMnemonic { get; }

        public int Size { get; }

        public TYPE Type { get; }

        public string Description { get; }

        public string Explanation { get; }

        public override string ToString() => $"OPCODE:\t{Opcode}\r\nMNEMONIC:\t{Mnemonic}\r\nAltMNEMONIC:\t{AltMnemonic}\r\nSIZE:\t\t{Size}\r\nTYPE:\t\t{Type}\r\nDESCRIPTION:\t{Description}\r\nExplanation:\t{Explanation}";
    }

    #endregion

    #region Instructions

    public class Instructions
    {
        public Instruction[] Z80MainInstructions;
        public Instruction[] Z80BitInstructions;
        public Instruction[] Z80IXInstructions;
        public Instruction[] Z80MiscInstructions;
        public Instruction[] Z80IYInstructions;
        public Instruction[] Z80IXBitInstructions;
        public Instruction[] Z80IYBitInstructions;

        /// <summary>
        /// Constructor
        /// </summary>
        public Instructions()
        {
            #region Instructions (Main)

            // Z80 Main instructions 
            Z80MainInstructions = new Instruction[]
            {
                new Instruction(0x00, "nop", "", 1, TYPE.NONE, "No operation", "The CPU performs no operation during this machine cycle."),
                new Instruction(0x01, "ld bc,nn", "", 3, TYPE.NONE, "Load register pair BC with immediate data nn", "The content of the two memory locations immediately following the opcode is loaded into register pair BC.\r\nThe lower order byte of the data occurs immediately after the opcode."),
                new Instruction(0x02, "ld (bc),a", "", 1, TYPE.NONE, "Load indirectly addressed memory location (BC) from the accumulator", "The content of the accumulator is loaded into the memory location addressed by the content of the BC register pair."),
                new Instruction(0x03, "inc bc", "", 1, TYPE.NONE, "Increment register pair BC", "The content of register pair BC are incremented and the result is stored back in the register pair BC"),
                new Instruction(0x04, "inc b", "", 1, TYPE.NONE, "Increment register B", "The content of register B is incremented and stored back at register B."),
                new Instruction(0x05, "dec b", "", 1, TYPE.NONE, "Decrement register B", "The content of register B is decremented and stored back at register B."),
                new Instruction(0x06, "ld b,n", "", 2, TYPE.NONE, "Load register B with immediate data n", "The content of the memory location immediately following the opcode location is loaded into register B"),
                new Instruction(0x07, "rlca", "", 1, TYPE.NONE, "Rotate accumulator left with branch carry", "The content of the accumulator is rotated left one bit position.\r\nThe original content of bit 7 is moved to the carry flag as well as to bit 0."),
                new Instruction(0x08, "ex af,af'", "", 1, TYPE.NONE, "Exchange accumulator and flags with alternate\r\nregisters", "The content of the accumulator and status register are exchanged with the content of the alternate accumulator and status register."),
                new Instruction(0x09, "add hl,bc", "", 1, TYPE.NONE, "Add BC to register pair HL", "The content of register pair BC is added to the content of the HL register pair and the result is stored in HL."),
                new Instruction(0x0a, "ld a,(bc)", "", 1, TYPE.NONE, "Load accumulator from the memory location indirectly addressed by the BC register pair", "The content of the memory location addressed by the content of the BC register pair is loaded into the accumulator."),
                new Instruction(0x0b, "dec bc", "", 1, TYPE.NONE, "Decrement register pair BC", "The content of register pair BC is decremented and stored back at register pair BC."),
                new Instruction(0x0c, "inc c", "", 1, TYPE.NONE, "Increment register C", "The content of register C is incremented and stored back at register C."),
                new Instruction(0x0d, "dec c", "", 1, TYPE.NONE, "Decrement register C", "The content of register C is decremented and stored back at register C."),
                new Instruction(0x0e, "ld c,n", "", 2, TYPE.NONE, "Load register C with immediate data n", "The content of the memory location immediately following the opcode location is loaded into register C"),
                new Instruction(0x0f, "rrca", "", 1, TYPE.NONE, "Rotate accumulator right with branch carry", "The content of the accumulator is rotated right one bit position.\r\nThe content of bit 0 is moved to the carry flag as well as to bit 7."),
                new Instruction(0x10, "djnz o", "", 2, TYPE.CONDITIONALJUMP, "Decrement register B and jump relative (offset o) on no zero", "The B register is decremented.\r\nIf the result is not zero, the immediate offset value is added to the program counter using two's complement arithmetic so as to enable both forward and backward jumps.\r\nThe offset value is added to the value of PC + 2 (after the jump).\r\nAs a result, the effective offset is -126 to +129 bytes."),
                new Instruction(0x11, "ld de,nn", "", 3, TYPE.NONE, "Load register pair DE with immediate data nn", "The content of the two memory locations immediately following the opcode is loaded into register pair DE.\r\nThe lower order byte of the data occurs immediately after the opcode."),
                new Instruction(0x12, "ld (de),a", "", 1, TYPE.NONE, "Load indirectly addressed memory location (DE) from the accumulator", "The content of the accumulator is loaded into the memory location addressed by the content of the DE register pair."),
                new Instruction(0x13, "inc de", "", 1, TYPE.NONE, "Increment register pair DE", "The content of register pair DE is incremented and the result is stored back in the register pair DE"),
                new Instruction(0x14, "inc d", "", 1, TYPE.NONE, "Increment register D", "The content of register D is incremented and stored back at register D."),
                new Instruction(0x15, "dec d", "", 1, TYPE.NONE, "Decrement register D", "The content of register D is decremented and stored back at register D."),
                new Instruction(0x16, "ld d,n", "", 2, TYPE.NONE, "Load register D with immediate data n", "The content of the memory location immediately following the opcode location is loaded into register D"),
                new Instruction(0x17, "rla", "", 1, TYPE.NONE, "Rotate accumulator left through carry flag", "The content of the accumulator is shifted left one bit position.\r\nThe content of the carry flag is moved into bit 0 and the original content of bit 7 is moved into the carry flag."),
                new Instruction(0x18, "jr o", "", 2, TYPE.UNCONDITIONALJUMP, "Jump o relative", "The given offset value is added to the program counter using two's complement arithmetic so as to enable both forward and backward jumps.\r\nThe offset value is added to the value of PC + 2 (after the jump).\r\nAs a result, the effective offset is -126 to + 129 bytes.\r\nThe assembler automatically subtracts 2 from the source offset value to generate the hex code."),
                new Instruction(0x19, "add hl,de", "", 1, TYPE.NONE, "Add DE to register pair HL", "The content of register pair DE is added to the content of the HL register pair and the result is stored in HL."),
                new Instruction(0x1a, "ld a,(de)", "", 1, TYPE.NONE, "Load accumulator from the memory location indirectly addressed by the DE register pair", "The content of the memory location addressed by the content of the DE register pair is loaded into the accumulator."),
                new Instruction(0x1b, "dec de", "", 1, TYPE.NONE, "Decrement register pair DE", "The content of register pair DE is decremented and stored back at register pair DE."),
                new Instruction(0x1c, "inc e", "", 1, TYPE.NONE, "Increment register E", "The content of register E is incremented and stored back at register E."),
                new Instruction(0x1d, "dec e", "", 1, TYPE.NONE, "Decrement register E", "The content of register E is decremented and stored back at register E."),
                new Instruction(0x1e, "ld e,n", "", 2, TYPE.NONE, "Load register E with immediate data n", "The content of the memory location immediately following the opcode location is loaded into register E"),
                new Instruction(0x1f, "rra", "", 1, TYPE.NONE, "Rotate accumulator right through carry", "The content of the accumulator is shifted right one bit position.\r\nThe content of the carry flag is moved to bit 7 and the content of bit 0 is moved to the carry flag."),
                new Instruction(0x20, "jr nz,o", "", 2, TYPE.CONDITIONALJUMP, "Jump o relative on non zero", "If the result is non zero, the given offset value is added to the program counter using two's complement arithmetic so as to enable both forward and backward jumps.\r\nThe offset value is added to the value of PC + 2 (after the jump).\r\nAs a result, the effective offset is -126 to +129 bytes.\r\nThe assembler automatically subtracts 2 from the source offset value to generate the hex code.\r\nIf the condition is not met, the offset value is ignored and instruction execution continues in sequence."),
                new Instruction(0x21, "ld hl,nn", "", 3, TYPE.NONE, "Load register pair HL with immediate data nn", "The content of the two memory locations immediately following the opcode is loaded into register pair HL.\r\nThe lower order byte of the data occurs immediately after the opcode."),
                new Instruction(0x22, "ld (nn),hl", "", 3, TYPE.NONE, "Load the memory locations addressed by nn from HL", "The content of the L register is loaded into the memory location addressed by the memory locations immediately following the opcode.\r\nThe content of the H register is loaded into the memory location immediately following the location loaded from the L register.\r\nThe low order of the nn address occurs immediately after the opcode."),
                new Instruction(0x23, "inc hl", "", 1, TYPE.NONE, "Increment register pair HL", "The content of register pair HL is incremented and the result is stored back in the register pair HL"),
                new Instruction(0x24, "inc h", "", 1, TYPE.NONE, "Increment register H", "The content of register H is incremented and stored back at register H."),
                new Instruction(0x25, "dec h", "", 1, TYPE.NONE, "Decrement register H", "The content of register H is decremented and stored back at register H."),
                new Instruction(0x26, "ld h,n", "", 2, TYPE.NONE, "Load register H with immediate data n", "The content of the memory location immediately following the opcode location is loaded into register H"),
                new Instruction(0x27, "daa", "", 1, TYPE.NONE, "Decimal adjust accumulator", "The instruction conditionally adds '6' to the right and/or left nibble of the accumulator, based on the status register.\r\nFor BCD conversion after arithmetic operations."),
                new Instruction(0x28, "jr z,o", "", 2, TYPE.CONDITIONALJUMP, "Jump o relative on zero", "If the result is zero, the given offset value is added to the program counter using two's complement arithmetic so as to enable both forward and backward jumps.\r\nThe offset value is added to the value of PC + 2 (after the jump).\r\nAs a result, the effective offset is -126 to +129 bytes.\r\nThe assembler automatically subtracts 2 from the source offset value to generate the hex code.\r\nIf the condition is not met, the offset value is ignored and instruction execution continues in sequence."),
                new Instruction(0x29, "add hl,hl", "", 1, TYPE.NONE, "Add HL to register pair HL", "The content of register pair HL is added to the content of the HL register pair and the result is stored in HL."),
                new Instruction(0x2a, "ld hl,(nn)", "", 3, TYPE.NONE, "Load register pair HL from memory locations addressed by nn", "The content of the memory location addressed by the memory locations immediately following the opcode is loaded into register L.\r\nThe content of the memory location immediately following the one previously loaded are then loaded into register H.\r\nThe low order byte of the nn address immediately follows the opcode."),
                new Instruction(0x2b, "dec hl", "", 1, TYPE.NONE, "Decrement register pair HL", "The content of register pair HL is decremented and stored back at register pair HL."),
                new Instruction(0x2c, "inc l", "", 1, TYPE.NONE, "Increment register L", "The content of register L is incremented and stored back at register L."),
                new Instruction(0x2d, "dec l", "", 1, TYPE.NONE, "Decrement register L", "The content of register L is decremented and stored back at register L."),
                new Instruction(0x2e, "ld l,n", "", 2, TYPE.NONE, "Load register L with immediate data n", "The content of the memory location immediately following the opcode location is loaded into register L"),
                new Instruction(0x2f, "cpl", "", 1, TYPE.NONE, "Complement accumulator", "The content of the accumulator is complemented, or inverted, and the result is stored back in the accumulator (one's complement)."),
                new Instruction(0x30, "jr nc,o", "", 2, TYPE.CONDITIONALJUMP, "Jump o relative on no carry", "If the result gives no carry, the given offset value is added to the program counter using two's complement arithmetic so as to enable both forward and backward jumps.\r\nThe offset value is added to the value of PC + 2 (after the jump).\r\nAs a result, the effective offset is -126 to +129 bytes.\r\nThe assembler automatically subtracts 2 from the source offset value to generate the hex code.\r\nIf the condition is not met, the offset value is ignored and instruction execution continues in sequence."),
                new Instruction(0x31, "ld sp,nn", "", 3, TYPE.NONE, "Load the stack pointer with immediate data nn", "The content of the two memory locations immediately following the opcode is loaded into register SP.\r\nThe lower order byte of the data occurs immediately after the opcode."),
                new Instruction(0x32, "ld (nn),a", "", 3, TYPE.NONE, "Load directly addressed memory location (nn) from accumulator", "The content of the accumulator is loaded into the memory location addressed by the content of the memory locations immediately following the opcode.\r\nThe low byte of the address immediately follows the opcode."),
                new Instruction(0x33, "inc sp", "", 1, TYPE.NONE, "Increment register SP", "The content of the stack pointer is incremented and the result is stored back in the stack pointer"),
                new Instruction(0x34, "inc (hl)", "", 1, TYPE.NONE, "Increment indirectly addressed memory location (HL)", "The content of the memory location addressed by the HL register pair is incremented and stored back at that location."),
                new Instruction(0x35, "dec (hl)", "", 1, TYPE.NONE, "Decrement memory location (HL)", "The indirectly addressed memory location (HL) is decremented."),
                new Instruction(0x36, "ld (hl),n", "", 2, TYPE.NONE, "Load immediate data n into the indirectly addressed memory location (HL)", "The content of the memory location immediately following the opcode is loaded into the memory location indirectly addressed by the HL register pair"),
                new Instruction(0x37, "scf", "", 1, TYPE.NONE, "Set carry flag", "The carry flag is set."),
                new Instruction(0x38, "jr c,o", "", 2, TYPE.CONDITIONALJUMP, "Jump o relative on carry", "If the result gives a carry, the given offset value is added to the program counter using two's complement arithmetic so as to enable both forward and backward jumps.\r\nThe offset value is added to the value of PC + 2 (after the jump).\r\nAs a result, the effective offset is -126 to +129 bytes.\r\nThe assembler automatically subtracts 2 from the source offset value to generate the hex code.\r\nIf the condition is not met, the offset value is ignored and instruction execution continues in sequence."),
                new Instruction(0x39, "add hl,sp", "", 1, TYPE.NONE, "Add the stack pointer (SP) to register pair HL", "The content of the stack pointer (SP) is added to the content of the HL register pair and the result is stored in HL."),
                new Instruction(0x3a, "ld a,(nn)", "", 3, TYPE.NONE, "Load accumulator from the memory location (nn)", "The content of the memory location addressed by the content of the 2 memory locations immediately following the opcode are loaded into the accumulator.\r\nThe low byte of the address occurs immediately after the opcode."),
                new Instruction(0x3b, "dec sp", "", 1, TYPE.NONE, "Decrement stack pointer (SP)", "The content of the stack pointer (SP) is decremented and stored back at the stack pointer (SP)."),
                new Instruction(0x3c, "inc a", "", 1, TYPE.NONE, "Increment register A", "The content of register A is incremented and stored back at register A."),
                new Instruction(0x3d, "dec a", "", 1, TYPE.NONE, "Decrement register A", "The content of register A is decremented and stored back at register A."),
                new Instruction(0x3e, "ld a,n", "", 2, TYPE.NONE, "Load register A with immediate data n", "The content of the memory location immediately following the opcode location is loaded into register A"),
                new Instruction(0x3f, "ccf", "", 1, TYPE.NONE, "Complement carry flag", "The carry flag is complemented."),
                new Instruction(0x40, "ld b,b", "", 1, TYPE.NONE, "Load register B from register B", "The content of register B is loaded into the register B."),
                new Instruction(0x41, "ld b,c", "", 1, TYPE.NONE, "Load register B from register C", "The content of register C is loaded into the register B."),
                new Instruction(0x42, "ld b,d", "", 1, TYPE.NONE, "Load register B from register D", "The content of register D is loaded into the register B."),
                new Instruction(0x43, "ld b,e", "", 1, TYPE.NONE, "Load register B from register E", "The content of register E is loaded into the register B."),
                new Instruction(0x44, "ld b,h", "", 1, TYPE.NONE, "Load register B from register H", "The content of register H is loaded into the register B."),
                new Instruction(0x45, "ld b,l", "", 1, TYPE.NONE, "Load register B from register L", "The content of register L is loaded into the register B."),
                new Instruction(0x46, "ld b,(hl)", "", 1, TYPE.NONE, "Load register B indirect from memory location (HL)", "The content of the memory location addressed by HL are loaded into register B."),
                new Instruction(0x47, "ld b,a", "", 1, TYPE.NONE, "Load register B from register A", "The content of register A is loaded into the register B."),
                new Instruction(0x48, "ld c,b", "", 1, TYPE.NONE, "Load register C from register B", "The content of register B is loaded into the register C."),
                new Instruction(0x49, "ld c,c", "", 1, TYPE.NONE, "Load register C from register C", "The content of register C is loaded into the register C."),
                new Instruction(0x4a, "ld c,d", "", 1, TYPE.NONE, "Load register C from register D", "The content of register D is loaded into the register C."),
                new Instruction(0x4b, "ld c,e", "", 1, TYPE.NONE, "Load register C from register E", "The content of register E is loaded into the register C."),
                new Instruction(0x4c, "ld c,h", "", 1, TYPE.NONE, "Load register C from register H", "The content of register H is loaded into the register C."),
                new Instruction(0x4d, "ld c,l", "", 1, TYPE.NONE, "Load register C from register L", "The content of register L is loaded into the register C."),
                new Instruction(0x4e, "ld c,(hl)", "", 1, TYPE.NONE, "Load register C indirect from memory location (HL)", "The content of the memory location addressed by HL are loaded into register C."),
                new Instruction(0x4f, "ld c,a", "", 1, TYPE.NONE, "Load register C from register A", "The content of register A is loaded into the register C."),
                new Instruction(0x50, "ld d,b", "", 1, TYPE.NONE, "Load register D from register B", "The content of register B is loaded into the register D."),
                new Instruction(0x51, "ld d,c", "", 1, TYPE.NONE, "Load register D from register C", "The content of register C is loaded into the register D."),
                new Instruction(0x52, "ld d,d", "", 1, TYPE.NONE, "Load register D from register D", "The content of register D is loaded into the register D."),
                new Instruction(0x53, "ld d,e", "", 1, TYPE.NONE, "Load register D from register E", "The content of register E is loaded into the register D."),
                new Instruction(0x54, "ld d,h", "", 1, TYPE.NONE, "Load register D from register H", "The content of register H is loaded into the register D."),
                new Instruction(0x55, "ld d,l", "", 1, TYPE.NONE, "Load register D from register L", "The content of register L is loaded into the register D."),
                new Instruction(0x56, "ld d,(hl)", "", 1, TYPE.NONE, "Load register D indirect from memory location (HL)", "The content of the memory location addressed by HL are loaded into register D."),
                new Instruction(0x57, "ld d,a", "", 1, TYPE.NONE, "Load register D from register A", "The content of register A is loaded into the register D."),
                new Instruction(0x58, "ld e,b", "", 1, TYPE.NONE, "Load register E from register B", "The content of register B is loaded into the register E."),
                new Instruction(0x59, "ld e,c", "", 1, TYPE.NONE, "Load register E from register C", "The content of register C is loaded into the register E."),
                new Instruction(0x5a, "ld e,d", "", 1, TYPE.NONE, "Load register E from register D", "The content of register D is loaded into the register E."),
                new Instruction(0x5b, "ld e,e", "", 1, TYPE.NONE, "Load register E from register E", "The content of register E is loaded into the register E."),
                new Instruction(0x5c, "ld e,h", "", 1, TYPE.NONE, "Load register E from register H", "The content of register H is loaded into the register E."),
                new Instruction(0x5d, "ld e,l", "", 1, TYPE.NONE, "Load register E from register L", "The content of register L is loaded into the register E."),
                new Instruction(0x5e, "ld e,(hl)", "", 1, TYPE.NONE, "Load register E indirect from memory location (HL)", "The content of the memory location addressed by HL are loaded into register E."),
                new Instruction(0x5f, "ld e,a", "", 1, TYPE.NONE, "Load register E from register A", "The content of register A is loaded into the register E."),
                new Instruction(0x60, "ld h,b", "", 1, TYPE.NONE, "Load register H from register B", "The content of register B is loaded into the register H."),
                new Instruction(0x61, "ld h,c", "", 1, TYPE.NONE, "Load register H from register C", "The content of register C is loaded into the register H."),
                new Instruction(0x62, "ld h,d", "", 1, TYPE.NONE, "Load register H from register D", "The content of register D is loaded into the register H."),
                new Instruction(0x63, "ld h,e", "", 1, TYPE.NONE, "Load register H from register E", "The content of register E is loaded into the register H."),
                new Instruction(0x64, "ld h,h", "", 1, TYPE.NONE, "Load register H from register H", "The content of register H is loaded into the register H."),
                new Instruction(0x65, "ld h,l", "", 1, TYPE.NONE, "Load register H from register L", "The content of register L is loaded into the register H."),
                new Instruction(0x66, "ld h,(hl)", "", 1, TYPE.NONE, "Load register H indirect from memory location (HL)", "The content of the memory location addressed by HL are loaded into register H."),
                new Instruction(0x67, "ld h,a", "", 1, TYPE.NONE, "Load register H from register A", "The content of register A is loaded into the register H."),
                new Instruction(0x68, "ld l,b", "", 1, TYPE.NONE, "Load register L from register B", "The content of register B is loaded into the register L."),
                new Instruction(0x69, "ld l,c", "", 1, TYPE.NONE, "Load register L from register C", "The content of register C is loaded into the register L."),
                new Instruction(0x6a, "ld l,d", "", 1, TYPE.NONE, "Load register L from register D", "The content of register D is loaded into the register L."),
                new Instruction(0x6b, "ld l,e", "", 1, TYPE.NONE, "Load register L from register E", "The content of register E is loaded into the register L."),
                new Instruction(0x6c, "ld l,h", "", 1, TYPE.NONE, "Load register L from register H", "The content of register H is loaded into the register L."),
                new Instruction(0x6d, "ld l,l", "", 1, TYPE.NONE, "Load register L from register L", "The content of register L is loaded into the register L."),
                new Instruction(0x6e, "ld l,(hl)", "", 1, TYPE.NONE, "Load register L indirect from memory location (HL)", "The content of the memory location addressed by HL are loaded into register L."),
                new Instruction(0x6f, "ld l,a", "", 1, TYPE.NONE, "Load register L from register A", "The content of register A is loaded into the register L."),
                new Instruction(0x70, "ld (hl),b", "", 1, TYPE.NONE, "Load indirectly addressed memory location (HL) from register B", "The content of register B is loaded into the memory location addressed by the content of the HL register pair."),
                new Instruction(0x71, "ld (hl),c", "", 1, TYPE.NONE, "Load indirectly addressed memory location (HL) from register C", "The content of register C is loaded into the memory location addressed by the content of the HL register pair."),
                new Instruction(0x72, "ld (hl),d", "", 1, TYPE.NONE, "Load indirectly addressed memory location (HL) from register D", "The content of register D is loaded into the memory location addressed by the content of the HL register pair."),
                new Instruction(0x73, "ld (hl),e", "", 1, TYPE.NONE, "Load indirectly addressed memory location (HL) from register E", "The content of register E is loaded into the memory location addressed by the content of the HL register pair."),
                new Instruction(0x74, "ld (hl),h", "", 1, TYPE.NONE, "Load indirectly addressed memory location (HL) from register H", "The content of register H is loaded into the memory location addressed by the content of the HL register pair."),
                new Instruction(0x75, "ld (hl),l", "", 1, TYPE.NONE, "Load indirectly addressed memory location (HL) from register L", "The content of register L is loaded into the memory location addressed by the content of the HL register pair."),
                new Instruction(0x76, "halt", "", 1, TYPE.HALT, "Halt CPU", "CPU suspends operation and executes NOP's so as to continue memory refresh cycles, until interrupt or reset is received."),
                new Instruction(0x77, "ld (hl),a", "", 1, TYPE.NONE, "Load indirectly addressed memory location (HL) from the accumulator", "The content of the accumulator is loaded into the memory location addressed by the content of the HL register pair."),
                new Instruction(0x78, "ld a,b", "", 1, TYPE.NONE, "Load accumulator from register B", "The content of register B is loaded into the register A."),
                new Instruction(0x79, "ld a,c", "", 1, TYPE.NONE, "Load accumulator from register C", "The content of register C is loaded into the register A."),
                new Instruction(0x7a, "ld a,d", "", 1, TYPE.NONE, "Load accumulator from register D", "The content of register D is loaded into the register A."),
                new Instruction(0x7b, "ld a,e", "", 1, TYPE.NONE, "Load accumulator from register E", "The content of register E is loaded into the register A."),
                new Instruction(0x7c, "ld a,h", "", 1, TYPE.NONE, "Load accumulator from register H", "The content of register H is loaded into the register A."),
                new Instruction(0x7d, "ld a,l", "", 1, TYPE.NONE, "Load accumulator from register L", "The content of register L is loaded into the register A."),
                new Instruction(0x7e, "ld a,(hl)", "", 1, TYPE.NONE, "Load accumulator from the memory location indirectly addressed by the HL register pair", "The content of the memory location addressed by the content of the HL register pair is loaded into the accumulator."),
                new Instruction(0x7f, "ld a,a", "", 1, TYPE.NONE, "Load accumulator from register A", "The content of register A is loaded into the register A."),
                new Instruction(0x80, "add a,b", "add b", 1, TYPE.NONE, "Add accumulator to register B", "The content of the accumulator is added to the content of the B register.\r\nThe result is placed in the accumulator."),
                new Instruction(0x81, "add a,c", "add c", 1, TYPE.NONE, "Add accumulator to register C", "The content of the accumulator is added to the content of the C register.\r\nThe result is placed in the accumulator."),
                new Instruction(0x82, "add a,d", "add d", 1, TYPE.NONE, "Add accumulator to register D", "The content of the accumulator is added to the content of the D register.\r\nThe result is placed in the accumulator."),
                new Instruction(0x83, "add a,e", "add e", 1, TYPE.NONE, "Add accumulator to register E", "The content of the accumulator is added to the content of the E register.\r\nThe result is placed in the accumulator."),
                new Instruction(0x84, "add a,h", "add h", 1, TYPE.NONE, "Add accumulator to register H", "The content of the accumulator is added to the content of the H register.\r\nThe result is placed in the accumulator."),
                new Instruction(0x85, "add a,l", "add l", 1, TYPE.NONE, "Add accumulator to register L", "The content of the accumulator is added to the content of the L register.\r\nThe result is placed in the accumulator."),
                new Instruction(0x86, "add a,(hl)", "add (hl)", 1, TYPE.NONE, "Add accumulator to indirectly addressed memory location (HL)", "The content of the accumulator is added to the content of the memory location addressed by the HL register pair.\r\nThe result is stored in the accumulator."),
                new Instruction(0x87, "add a,a", "add a", 1, TYPE.NONE, "Add accumulator to register A", "The content of the accumulator is added to the content of the A register.\r\nThe result is placed in the accumulator."),
                new Instruction(0x88, "adc a,b", "", 1, TYPE.NONE, "Add register B to accumulator with carry", "The register B and the carry flag from the status register are added to the accumulator.\r\nThe result is stored in the accumulator."),
                new Instruction(0x89, "adc a,c", "", 1, TYPE.NONE, "Add register C to accumulator with carry", "The register C and the carry flag from the status register are added to the accumulator.\r\nThe result is stored in the accumulator."),
                new Instruction(0x8a, "adc a,d", "", 1, TYPE.NONE, "Add register D to accumulator with carry", "The register D and the carry flag from the status register are added to the accumulator.\r\nThe result is stored in the accumulator."),
                new Instruction(0x8b, "adc a,e", "", 1, TYPE.NONE, "Add register E to accumulator with carry", "The register E and the carry flag from the status register are added to the accumulator.\r\nThe result is stored in the accumulator."),
                new Instruction(0x8c, "adc a,h", "", 1, TYPE.NONE, "Add register H to accumulator with carry", "The register H and the carry flag from the status register are added to the accumulator.\r\nThe result is stored in the accumulator."),
                new Instruction(0x8d, "adc a,l", "", 1, TYPE.NONE, "Add register L to accumulator with carry", "The register L and the carry flag from the status register are added to the accumulator.\r\nThe result is stored in the accumulator."),
                new Instruction(0x8e, "adc a,(hl)", "", 1, TYPE.NONE, "Add the memory location specified by HL to accumulator with carry", "The memory location specified by HL and the carry flag from the status register are added to the accumulator.\r\nThe result is stored in the accumulator."),
                new Instruction(0x8f, "adc a,a", "", 1, TYPE.NONE, "Add register A to accumulator with carry", "The register B and the carry flag from the status register are added to the accumulator.\r\nThe result is stored in the accumulator."),
                new Instruction(0x90, "sub a,b", "sub b", 1, TYPE.NONE, "Subtract register B from accumulator", "Register B is subtracted from the accumulator and the result is stored in the accumulator."),
                new Instruction(0x91, "sub a,c", "sub c", 1, TYPE.NONE, "Subtract register C from accumulator", "Register C is subtracted from the accumulator and the result is stored in the accumulator."),
                new Instruction(0x92, "sub a,d", "sub d", 1, TYPE.NONE, "Subtract register D from accumulator", "Register D is subtracted from the accumulator and the result is stored in the accumulator."),
                new Instruction(0x93, "sub a,e", "sub e", 1, TYPE.NONE, "Subtract register E from accumulator", "Register E is subtracted from the accumulator and the result is stored in the accumulator."),
                new Instruction(0x94, "sub a,h", "sub h", 1, TYPE.NONE, "Subtract register H from accumulator", "Register H is subtracted from the accumulator and the result is stored in the accumulator."),
                new Instruction(0x95, "sub a,l", "sub l", 1, TYPE.NONE, "Subtract register L from accumulator", "Register L is subtracted from the accumulator and the result is stored in the accumulator."),
                new Instruction(0x96, "sub a,(hl)", "sub (hl)", 1, TYPE.NONE, "Subtract the memory location specified by HL from accumulator", "The memory location specified by HL is subtracted from the accumulator and the result is stored in the accumulator."),
                new Instruction(0x97, "sub a,a", "sub a", 1, TYPE.NONE, "Subtract accumulator from accumulator", "Register A is subtracted from the accumulator and the result is stored in the accumulator."),
                new Instruction(0x98, "sbc a,b", "", 1, TYPE.NONE, "Subtract with borrow accumulator and register B", "Register B, summed with the content of the carry flag, is subtracted from the content of the accumulator, the result is placed in the accumulator."),
                new Instruction(0x99, "sbc a,c", "", 1, TYPE.NONE, "Subtract with borrow accumulator and register C", "Register C, summed with the content of the carry flag, is subtracted from the content of the accumulator, the result is placed in the accumulator."),
                new Instruction(0x9a, "sbc a,d", "", 1, TYPE.NONE, "Subtract with borrow accumulator and register D", "Register D, summed with the content of the carry flag, is subtracted from the content of the accumulator, the result is placed in the accumulator."),
                new Instruction(0x9b, "sbc a,e", "", 1, TYPE.NONE, "Subtract with borrow accumulator and register E", "Register E, summed with the content of the carry flag, is subtracted from the content of the accumulator, the result is placed in the accumulator."),
                new Instruction(0x9c, "sbc a,h", "", 1, TYPE.NONE, "Subtract with borrow accumulator and register H", "Register H, summed with the content of the carry flag, is subtracted from the content of the accumulator, the result is placed in the accumulator."),
                new Instruction(0x9d, "sbc a,l", "", 1, TYPE.NONE, "Subtract with borrow accumulator and register L", "Register L, summed with the content of the carry flag, is subtracted from the content of the accumulator, the result is placed in the accumulator."),
                new Instruction(0x9e, "sbc a,(hl)", "", 1, TYPE.NONE, "Subtract with borrow accumulator and the indirectly addressed memory location (HL)", "The memory location specified by HL, summed with the content of the carry flag, is subtracted from the content of the accumulator, the result is placed in the accumulator."),
                new Instruction(0x9f, "sbc a,a", "", 1, TYPE.NONE, "Subtract with borrow accumulator and register A", "Register A, summed with the content of the carry flag, is subtracted from the content of the accumulator, the result is placed in the accumulator."),
                new Instruction(0xa0, "and b", "", 1, TYPE.NONE, "Logical AND accumulator with register B", "The accumulator and register B are logically 'AND'ed and the result is stored in the accumulator."),
                new Instruction(0xa1, "and c", "", 1, TYPE.NONE, "Logical AND accumulator with register C", "The accumulator and register C are logically 'AND'ed and the result is stored in the accumulator."),
                new Instruction(0xa2, "and d", "", 1, TYPE.NONE, "Logical AND accumulator with register D", "The accumulator and register D are logically 'AND'ed and the result is stored in the accumulator."),
                new Instruction(0xa3, "and e", "", 1, TYPE.NONE, "Logical AND accumulator with register E", "The accumulator and register E are logically 'AND'ed and the result is stored in the accumulator."),
                new Instruction(0xa4, "and h", "", 1, TYPE.NONE, "Logical AND accumulator with register H", "The accumulator and register H are logically 'AND'ed and the result is stored in the accumulator."),
                new Instruction(0xa5, "and l", "", 1, TYPE.NONE, "Logical AND accumulator with register L", "The accumulator and register L are logically 'AND'ed and the result is stored in the accumulator."),
                new Instruction(0xa6, "and (hl)", "", 1, TYPE.NONE, "Logical AND accumulator with the indirectly addressed memory location (HL)", "The accumulator and the memory location specified by HL are logically 'AND'ed and the result is stored in the accumulator."),
                new Instruction(0xa7, "and a", "", 1, TYPE.NONE, "Logical AND accumulator with register A", "The accumulator and register A are logically 'AND'ed and the result is stored in the accumulator."),
                new Instruction(0xa8, "xor b", "", 1, TYPE.NONE, "Logical Exclusive OR accumulator and register B", "The accumulator and register B are logically Exclusive OR'ed and the result is stored in the accumulator."),
                new Instruction(0xa9, "xor c", "", 1, TYPE.NONE, "Logical Exclusive OR accumulator and register C", "The accumulator and register C are logically Exclusive OR'ed and the result is stored in the accumulator."),
                new Instruction(0xaa, "xor d", "", 1, TYPE.NONE, "Logical Exclusive OR accumulator and register D", "The accumulator and register D are logically Exclusive OR'ed and the result is stored in the accumulator."),
                new Instruction(0xab, "xor e", "", 1, TYPE.NONE, "Logical Exclusive OR accumulator and register E", "The accumulator and register E are logically Exclusive OR'ed and the result is stored in the accumulator."),
                new Instruction(0xac, "xor h", "", 1, TYPE.NONE, "Logical Exclusive OR accumulator and register H", "The accumulator and register H are logically Exclusive OR'ed and the result is stored in the accumulator."),
                new Instruction(0xad, "xor l", "", 1, TYPE.NONE, "Logical Exclusive OR accumulator and register L", "The accumulator and register L are logically Exclusive OR'ed and the result is stored in the accumulator."),
                new Instruction(0xae, "xor (hl)", "", 1, TYPE.NONE, "Logical Exclusive OR accumulator and the indirectly addressed memory location (HL)", "The accumulator and the memory location specified by HL are logically Exclusive OR'ed and the result is stored in the accumulator."),
                new Instruction(0xaf, "xor a", "", 1, TYPE.NONE, "Logical Exclusive OR accumulator and accumulator", "The accumulator and register A are logically Exclusive OR'ed and the result is stored in the accumulator."),
                new Instruction(0xb0, "or b", "", 1, TYPE.NONE, "Logical or accumulator and register B", "The accumulator and register B are logically OR'ed and the result is stored in the accumulator."),
                new Instruction(0xb1, "or c", "", 1, TYPE.NONE, "Logical or accumulator and register C", "The accumulator and register C are logically OR'ed and the result is stored in the accumulator."),
                new Instruction(0xb2, "or d", "", 1, TYPE.NONE, "Logical or accumulator and register D", "The accumulator and register D are logically OR'ed and the result is stored in the accumulator."),
                new Instruction(0xb3, "or e", "", 1, TYPE.NONE, "Logical or accumulator and register E", "The accumulator and register E are logically OR'ed and the result is stored in the accumulator."),
                new Instruction(0xb4, "or h", "", 1, TYPE.NONE, "Logical or accumulator and register H", "The accumulator and register H are logically OR'ed and the result is stored in the accumulator."),
                new Instruction(0xb5, "or l", "", 1, TYPE.NONE, "Logical or accumulator and register L", "The accumulator and register L are logically OR'ed and the result is stored in the accumulator."),
                new Instruction(0xb6, "or (hl)", "", 1, TYPE.NONE, "Logical or accumulator and the indirectly addressed memory location (HL)", "The accumulator and the memory location specified by HL are logically OR'ed and the result is stored in the accumulator."),
                new Instruction(0xb7, "or a", "", 1, TYPE.NONE, "Logical or accumulator and register A", "The accumulator and register A are logically OR'ed and the result is stored in the accumulator."),
                new Instruction(0xb8, "cp b", "", 1, TYPE.NONE, "Compare register B to accumulator", "Register B is subtracted from the accumulator.\r\nThe result is discarded."),
                new Instruction(0xb9, "cp c", "", 1, TYPE.NONE, "Compare register C to accumulator", "Register C is subtracted from the accumulator.\r\nThe result is discarded."),
                new Instruction(0xba, "cp d", "", 1, TYPE.NONE, "Compare register D to accumulator", "Register C is subtracted from the accumulator.\r\nThe result is discarded."),
                new Instruction(0xbb, "cp e", "", 1, TYPE.NONE, "Compare register E to accumulator", "Register D is subtracted from the accumulator.\r\nThe result is discarded."),
                new Instruction(0xbc, "cp h", "", 1, TYPE.NONE, "Compare register H to accumulator", "Register H is subtracted from the accumulator.\r\nThe result is discarded."),
                new Instruction(0xbd, "cp l", "", 1, TYPE.NONE, "Compare register L to accumulator", "Register L is subtracted from the accumulator.\r\nThe result is discarded."),
                new Instruction(0xbe, "cp (hl)", "", 1, TYPE.NONE, "Compare the indirectly addressed memory location (HL) to accumulator", "The memory location specified by HL is subtracted from the accumulator.\r\nThe result is discarded."),
                new Instruction(0xbf, "cp a", "", 1, TYPE.NONE, "Compare register A to accumulator", "Register A is subtracted from the accumulator.\r\nThe result is discarded."),
                new Instruction(0xc0, "ret nz", "", 1, TYPE.CONDITIONALRETURN, "Return from subroutine on non zero result", "If the result is non zero, the content of the program counter is popped off the stack as described for the POP instructions.\r\nThe next instruction is fetched from the address in PC.\r\nIf the condition is not met, instruction execution continues in sequence."),
                new Instruction(0xc1, "pop bc", "", 1, TYPE.NONE, "Pop register pair BC from stack", "The content of the memory location addressed by the stack pointer is loaded into the low order of the register pair BC and then the stack pointer is incremented.\r\nThe content of the memory location now addressed by the stack pointer is loaded into the high order of the register pair BC and the stack pointer is again incremented."),
                new Instruction(0xc2, "jp nz,nn", "", 3, TYPE.CONDITIONALJUMP, "Jump on non zero to location nn", "If the result is non zero, the two-byte address immediately following the opcode will be loaded into the program counter with the first byte following the opcode being loaded into the low order of the PC.\r\nIf the condition is not met, the address 'nn' is ignored and the following instruction is executed."),
                new Instruction(0xc3, "jp nn", "", 3, TYPE.UNCONDITIONALJUMP, "Jump to location nn", "The two-byte address immediately following the opcode will be loaded into the program counter with the first byte following the opcode being loaded into the low order of the PC."),
                new Instruction(0xc4, "call nz,nn", "", 3, TYPE.CONDITIONALCALL, "Call subroutine on non zero result", "If the result is non zero, the content of the program counter is pushed onto the stack as described for the PUSH instructions.\r\nThen, the content of the memory location immediately following the opcode is loaded into the low order of the PC and the content of the second memory location after the the opcode is loaded into the high order half of the PC.\r\nThe next instruction fetched will be from this new address.\r\nIf the condition is not met, the address 'nn' is ignored and the following instruction is executed."),
                new Instruction(0xc5, "push bc", "", 1, TYPE.NONE, "Push register pair BC onto stack", "The stack pointer is decremented and the content of the high order of the register pair BC is then loaded into the memory location addressed by the stack pointer.\r\nThe stack pointer is again decremented and the content of the low order of the register pair BC is loaded into the memory location currently addressed by the stack pointer."),
                new Instruction(0xc6, "add a,n", "", 2, TYPE.NONE, "Add accumulator to immediate data n", "The content of the accumulator is added to the content of the memory location immediately following the op code.\r\nThe result is stored in the accumulator."),
                new Instruction(0xc7, "rst 00h", "", 1, TYPE.UNCONDITIONALRESTART, "Restart at 0x0000", "The content of the program counter is pushed onto the stack as described for the PUSH instructions.\r\n0x0000 is then loaded into the PC and the next instruction is fetched from this new addres."),
                new Instruction(0xc8, "ret z", "", 1, TYPE.CONDITIONALRETURN, "Return from subroutine on zero result", "If the result is zero, the content of the program counter is popped off the stack as described for the POP instructions.\r\nThe next instruction is fetched from the address in PC.\r\nIf the condition is not met, instruction execution continues in sequence."),
                new Instruction(0xc9, "ret", "", 1, TYPE.UNCONDITIONALRETURN, "Return from subroutine", "The program counter is popped off the stack as described for the POP instructions.\r\nThe next instruction fetched is from the location pointed to by PC."),
                new Instruction(0xca, "jp z,nn", "", 3, TYPE.CONDITIONALJUMP, "Jump on zero to location nn", "If the result is zero, the two-byte address immediately following the opcode will be loaded into the program counter with the first byte following the opcode being loaded into the low order of the PC.\r\nIf the condition is not met, the address 'nn' is ignored and the following instruction is executed."),
                new Instruction(0xcb, "bit", "", 0, TYPE.NONE, "-", "-"),                           // To extended bit instructions       
                new Instruction(0xcc, "call z,nn", "", 3, TYPE.CONDITIONALCALL, "Call subroutine on zero result", "If the result is zero, the content of the program counter is pushed onto the stack as described for the PUSH instructions.\r\nThen, the content of the memory location immediately following the opcode is loaded into the low order of the PC and the content of the second memory location after the the opcode is loaded into the high order half of the PC.\r\nThe next instruction fetched will be from this new address.\r\nIf the condition is not met, the address 'nn' is ignored and the following instruction is executed."),
                new Instruction(0xcd, "call nn", "", 3, TYPE.UNCONDITIONALCALL, "Call subroutine", "The content of the program counter is pushed onto the stack as described for the PUSH instructions.\r\nThen, the content of the memory location immediately following the opcode is loaded into the low order of the PC and the content of the second memory location after the the opcode is loaded into the high order half of the PC.\r\nThe next instruction fetched will be from this new address."),
                new Instruction(0xce, "adc a,n", "add n", 2, TYPE.NONE, "Add n to accumulator with carry", "operand n and the carry flag from the status register are added to the accumulator.\r\nThe result is stored in the accumulator."),
                new Instruction(0xcf, "rst 08h", "", 1, TYPE.UNCONDITIONALRESTART, "Restart at 0x0008", "The content of the program counter is pushed onto the stack as described for the PUSH instructions.\r\n0x0008 is then loaded into the PC and the next instruction is fetched from this new addres."),
                new Instruction(0xd0, "ret nc", "", 1, TYPE.CONDITIONALRETURN, "Return from subroutine on no carry result", "If the result doesn't give a carry, the content of the program counter is popped off the stack as described for the POP instructions.\r\nThe next instruction is fetched from the address in PC.\r\nIf the condition is not met, instruction execution continues in sequence."),
                new Instruction(0xd1, "pop de", "", 1, TYPE.NONE, "Pop register pair DE from stack", "The content of the memory location addressed by the stack pointer is loaded into the low order of the register pair DE and then the stack pointer is incremented.\r\nThe content of the memory location now addressed by the stack pointer is loaded into the high order of the register pair DE and the stack pointer is again incremented."),
                new Instruction(0xd2, "jp nc,nn", "", 3, TYPE.CONDITIONALJUMP, "Jump on no carry to location nn", "If the result doesn't give a carry, the two-byte address immediately following the opcode will be loaded into the program counter with the first byte following the opcode being loaded into the low order of the PC.\r\nIf the condition is not met, the address 'nn' is ignored and the following instruction is executed."),
                new Instruction(0xd3, "out (n),a", "", 2, TYPE.NONE, "Output accumulator to peripheral port n", "The content of the accumulator is output to the peripheral device addressed by the contents of the memory location immediately following the opcode."),
                new Instruction(0xd4, "call nc,nn", "", 3, TYPE.CONDITIONALCALL, "Call subroutine on no carry result", "If the result doesn't set the carry flag, the content of the program counter is pushed onto the stack as described for the PUSH instructions.\r\nThen, the content of the memory location immediately following the opcode is loaded into the low order of the PC and the content of the second memory location after the the opcode is loaded into the high order half of the PC.\r\nThe next instruction fetched will be from this new address.\r\nIf the condition is not met, the address 'nn' is ignored and the following instruction is executed."),
                new Instruction(0xd5, "push de", "", 1, TYPE.NONE, "Push register pair DE onto stack", "The stack pointer is decremented and the content of the high order of the register pair DE is then loaded into the memory location addressed by the stack pointer.\r\nThe stack pointer is again decremented and the content of the low order of the register pair DE is loaded into the memory location currently addressed by the stack pointer."),
                new Instruction(0xd6, "sub a,n", "sub n", 2, TYPE.NONE, "Subtract n from accumulator", "N is subtracted from the accumulator and the result is stored in the accumulator."),
                new Instruction(0xd7, "rst 10h", "", 1, TYPE.UNCONDITIONALRESTART, "Restart at 0x0010", "The content of the program counter is pushed onto the stack as described for the PUSH instructions.\r\n0x0010 is then loaded into the PC and the next instruction is fetched from this new addres."),
                new Instruction(0xd8, "ret c", "", 1, TYPE.CONDITIONALRETURN, "Return from subroutine on carry result", "If the result gives a carry, the content of the program counter is popped off the stack as described for the POP instructions.\r\nThe next instruction is fetched from the address in PC.\r\nIf the condition is not met, instruction execution continues in sequence."),
                new Instruction(0xd9, "exx", "", 1, TYPE.NONE, "Exchange alternate registers", "The content of the general purpose registers is exchanged with the content of the corresponding alternate registers."),
                new Instruction(0xda, "jp c,nn", "", 3, TYPE.CONDITIONALJUMP, "Jump on carry to location nn", "If the result gives a carry, the two-byte address immediately following the opcode will be loaded into the program counter with the first byte following the opcode being loaded into the low order of the PC.\r\nIf the condition is not met, the address 'nn' is ignored and the following instruction is executed."),
                new Instruction(0xdb, "in a,(n)", "", 2, TYPE.NONE, "Load accumulator from input port n", "The peripheral device n is read and the result is loaded into the accumulator.\r\n"),
                new Instruction(0xdc, "call c,nn", "", 3, TYPE.CONDITIONALCALL, "Call subroutine on carry result", "If the result sets the carry flag, the content of the program counter is pushed onto the stack as described for the PUSH instructions.\r\nThen, the content of the memory location immediately following the opcode is loaded into the low order of the PC and the content of the second memory location after the the opcode is loaded into the high order half of the PC.\r\nThe next instruction fetched will be from this new address.\r\nIf the condition is not met, the address 'nn' is ignored and the following instruction is executed."),
                new Instruction(0xdd, "ix", "", 0, TYPE.NONE, "-", "-"),                            // To extended IX instructions
                new Instruction(0xde, "sbc a,n", "", 2, TYPE.NONE, "Subtract with borrow accumulator and operand n", "operand n, summed with the content of the carry flag, is subtracted from the content of the accumulator, the result is placed in the accumulator."),
                new Instruction(0xdf, "rst 18h", "", 1, TYPE.UNCONDITIONALRESTART, "Restart at 0x0018", "The content of the program counter is pushed onto the stack as described for the PUSH instructions.\r\n0x0018 is then loaded into the PC and the next instruction is fetched from this new addres."),
                new Instruction(0xe0, "ret po", "", 1, TYPE.CONDITIONALRETURN, "Return from subroutine on parity odd result", "If the result is parity odd, the content of the program counter is popped off the stack as described for the POP instructions.\r\nThe next instruction is fetched from the address in PC.\r\nIf the condition is not met, instruction execution continues in sequence."),
                new Instruction(0xe1, "pop hl", "", 1, TYPE.NONE, "Pop register pair HL from stack", "The content of the memory location addressed by the stack pointer is loaded into the low order of the register pair HL and then the stack pointer is incremented.\r\nThe content of the memory location now addressed by the stack pointer is loaded into the high order of the register pair HL and the stack pointer is again incremented."),
                new Instruction(0xe2, "jp po,nn", "", 3, TYPE.CONDITIONALJUMP, "Jump on parity odd to location nn", "If the result is parity odd, the two-byte address immediately following the opcode will be loaded into the program counter with the first byte following the opcode being loaded into the low order of the PC.\r\nIf the condition is not met, the address 'nn' is ignored and the following instruction is executed."),
                new Instruction(0xe3, "ex (sp),hl", "", 1, TYPE.NONE, "Exchange HL with top of stack", "The content of the L register is exchanged with the content of the memory location addressed by the stack pointer.\r\nThe content of the H register is exchanged with the content of the memory location immediately following the one addressed by the stack pointer."),
                new Instruction(0xe4, "call po,nn", "", 3, TYPE.CONDITIONALCALL, "Call subroutine on parity odd result", "If the result is parity odd, the content of the program counter is pushed onto the stack as described for the PUSH instructions.\r\nThen, the content of the memory location immediately following the opcode is loaded into the low order of the PC and the content of the second memory location after the the opcode is loaded into the high order half of the PC.\r\nThe next instruction fetched will be from this new address.\r\nIf the condition is not met, the address 'nn' is ignored and the following instruction is executed."),
                new Instruction(0xe5, "push hl", "", 1, TYPE.NONE, "Push register pair HL onto stack", "The stack pointer is decremented and the content of the high order of the register pair HL is then loaded into the memory location addressed by the stack pointer.\r\nThe stack pointer is again decremented and the content of the low order of the register pair HL is loaded into the memory location currently addressed by the stack pointer."),
                new Instruction(0xe6, "and n", "", 2, TYPE.NONE, "Logical AND accumulator with operand n", "The accumulator and operand n are logically 'AND'ed and the result is stored in the accumulator."),
                new Instruction(0xe7, "rst 20h", "", 1, TYPE.UNCONDITIONALRESTART, "Restart at 0x0020", "The content of the program counter is pushed onto the stack as described for the PUSH instructions.\r\n0x0020 is then loaded into the PC and the next instruction is fetched from this new addres."),
                new Instruction(0xe8, "ret pe", "", 1, TYPE.CONDITIONALRETURN, "Return from subroutine on parity even result", "If the result is parity even, the content of the program counter is popped off the stack as described for the POP instructions.\r\nThe next instruction is fetched from the address in PC.\r\nIf the condition is not met, instruction execution continues in sequence."),
                new Instruction(0xe9, "jp (hl)", "", 1, TYPE.UNCONDITIONALJUMP, "Jump to HL", "The content of the HL register pair is loaded into the program counter.\r\nThe next instruction is fetched from this new address."),
                new Instruction(0xea, "jp pe,nn", "", 3, TYPE.CONDITIONALJUMP, "Jump on parity even to location nn", "If the result is parity even, the two-byte address immediately following the opcode will be loaded into the program counter with the first byte following the opcode being loaded into the low order of the PC.\r\nIf the condition is not met, the address 'nn' is ignored and the following instruction is executed."),
                new Instruction(0xeb, "ex de,hl", "", 1, TYPE.NONE, "Exchange the HL and DE registers", "The content of the register pairs DE and HL are exchanged."),
                new Instruction(0xec, "call pe,nn", "", 3, TYPE.CONDITIONALCALL, "Call subroutine on parity even result", "If the result is parity even, the content of the program counter is pushed onto the stack as described for the PUSH instructions.\r\nThen, the content of the memory location immediately following the opcode is loaded into the low order of the PC and the content of the second memory location after the the opcode is loaded into the high order half of the PC.\r\nThe next instruction fetched will be from this new address.\r\nIf the condition is not met, the address 'nn' is ignored and the following instruction is executed."),
                new Instruction(0xed, "misc", "", 0, TYPE.NONE, "-", "-"),                          // To extended misc instructions
                new Instruction(0xee, "xor n", "", 2, TYPE.NONE, "Logical Exclusive OR accumulator and operand n", "The accumulator and the specified operand are logically Exclusive OR'ed and the result is stored in the accumulator."),
                new Instruction(0xef, "rst 28h", "", 1, TYPE.UNCONDITIONALRESTART, "Restart at 0x0028", "The content of the program counter is pushed onto the stack as described for the PUSH instructions.\r\n0x0028 is then loaded into the PC and the next instruction is fetched from this new addres."),
                new Instruction(0xf0, "ret p", "", 1, TYPE.CONDITIONALRETURN, "Return from subroutine on positive result", "If the result is positive, the content of the program counter is popped off the stack as described for the POP instructions.\r\nThe next instruction is fetched from the address in PC.\r\nIf the condition is not met, instruction execution continues in sequence."),
                new Instruction(0xf1, "pop af", "", 1, TYPE.NONE, "Pop register pair AF from stack", "The content of the memory location addressed by the stack pointer is loaded into the low order of the register pair AF and then the stack pointer is incremented.\r\nThe content of the memory location now addressed by the stack pointer is loaded into the high order of the register pair AF and the stack pointer is again incremented."),
                new Instruction(0xf2, "jp p,nn", "", 3, TYPE.CONDITIONALJUMP, "Jump on positive result to location nn", "If the result is positive, the two-byte address immediately following the opcode will be loaded into the program counter with the first byte following the opcode being loaded into the low order of the PC.\r\nIf the condition is not met, the address 'nn' is ignored and the following instruction is executed."),
                new Instruction(0xf3, "di", "", 1, TYPE.NONE, "Disable interrupts", "The interrupt flip-flops are reset, thereby disabling all maskable interrupts.\r\nIt is reenabled by an EI instruction."),
                new Instruction(0xf4, "call p,nn", "", 3, TYPE.CONDITIONALCALL, "Call subroutine on positive result", "If the result is positive, the content of the program counter is pushed onto the stack as described for the PUSH instructions.\r\nThen, the content of the memory location immediately following the opcode is loaded into the low order of the PC and the content of the second memory location after the the opcode is loaded into the high order half of the PC.\r\nThe next instruction fetched will be from this new address.\r\nIf the condition is not met, the address 'nn' is ignored and the following instruction is executed."),
                new Instruction(0xf5, "push af", "", 1, TYPE.NONE, "Push register pair AF onto stack", "The stack pointer is decremented and the content of the high order of the register pair AF is then loaded into the memory location addressed by the stack pointer.\r\nThe stack pointer is again decremented and the content of the low order of the register pair AF is loaded into the memory location currently addressed by the stack pointer."),
                new Instruction(0xf6, "or n", "", 2, TYPE.NONE, "Logical OR accumulator and operand n", "The accumulator and the specified operand are logically OR'ed and the result is stored in the accumulator."),
                new Instruction(0xf7, "rst 30h", "", 1, TYPE.UNCONDITIONALRESTART, "Restart at 0x0030", "The content of the program counter is pushed onto the stack as described for the PUSH instructions.\r\n0x0030 is then loaded into the PC and the next instruction is fetched from this new addres."),
                new Instruction(0xf8, "ret m", "", 1, TYPE.CONDITIONALRETURN, "Return from subroutine on minus result", "If the result is negative, the content of the program counter is popped off the stack as described for the POP instructions.\r\nThe next instruction is fetched from the address in PC.\r\nIf the condition is not met, instruction execution continues in sequence."),
                new Instruction(0xf9, "ld sp,hl", "", 1, TYPE.NONE, "Load stack pointer from HL", "The content of the HL register pair is loaded into the stack pointer."),
                new Instruction(0xfa, "jp m,nn", "", 3, TYPE.CONDITIONALJUMP, "Jump on minus result to location nn", "If the result is negative, the two-byte address immediately following the opcode will be loaded into the program counter with the first byte following the opcode being loaded into the low order of the PC.\r\nIf the condition is not met, the address 'nn' is ignored and the following instruction is executed."),
                new Instruction(0xfb, "ei", "", 1, TYPE.NONE, "Enable interrupts", "The interrupt flip-flops are set, thereby enabling maskable interrupts after the execution of the instruction following the EI instruction.\r\nIn the meantime maskable interrupts are disabled."),
                new Instruction(0xfc, "call m,nn", "", 3, TYPE.CONDITIONALCALL, "Call subroutine on minus result", "If the result is negative, the content of the program counter is pushed onto the stack as described for the PUSH instructions.\r\nThen, the content of the memory location immediately following the opcode is loaded into the low order of the PC and the content of the second memory location after the the opcode is loaded into the high order half of the PC.\r\nThe next instruction fetched will be from this new address.\r\nIf the condition is not met, the address 'nn' is ignored and the following instruction is executed."),
                new Instruction(0xfd, "iy", "", 0, TYPE.NONE, "-", "-"),                            // To extended IY instructions
                new Instruction(0xfe, "cp n", "", 2, TYPE.NONE, "Compare n to accumulator", "n is subtracted from the accumulator.\r\nThe result is discarded."),
                new Instruction(0xff, "rst 38h", "", 1, TYPE.UNCONDITIONALRESTART, "Restart at 0x0038", "The content of the program counter is pushed onto the stack as described for the PUSH instructions.\r\n0x0038 is then loaded into the PC and the next instruction is fetched from this new addres.")
            };

            #endregion

            #region Instructions (Bit)

            // Bit instructions
            Z80BitInstructions = new Instruction[]
            {
                new Instruction(0xcb00, "rlc b", "", 2, TYPE.NONE, "Rotate register B left with branch carry", "The content of register B is rotated left.\r\nThe original content of bit 7 is moved to the carry."),
                new Instruction(0xcb01, "rlc c", "", 2, TYPE.NONE, "Rotate register C left with branch carry", "The content of register C is rotated left.\r\nThe original content of bit 7 is moved to the carry."),
                new Instruction(0xcb02, "rlc d", "", 2, TYPE.NONE, "Rotate register D left with branch carry", "The content of register D is rotated left.\r\nThe original content of bit 7 is moved to the carry."),
                new Instruction(0xcb03, "rlc e", "", 2, TYPE.NONE, "Rotate register E left with branch carry", "The content of register E is rotated left.\r\nThe original content of bit 7 is moved to the carry."),
                new Instruction(0xcb04, "rlc h", "", 2, TYPE.NONE, "Rotate register H left with branch carry", "The content of register H is rotated left.\r\nThe original content of bit 7 is moved to the carry."),
                new Instruction(0xcb05, "rlc l", "", 2, TYPE.NONE, "Rotate register L left with branch carry", "The content of register L is rotated left.\r\nThe original content of bit 7 is moved to the carry."),
                new Instruction(0xcb06, "rlc (hl)", "", 2, TYPE.NONE, "Rotate indirectly addressed memory location (HL) left with branch carry", "The content of the memory location addressed by the content of the HL register pair is rotated left.\r\nThe original content of bit 7 is moved to the carry."),
                new Instruction(0xcb07, "rlc a", "", 2, TYPE.NONE, "Rotate register A left with branch carry", "The content of register A is rotated left.\r\nThe original content of bit 7 is moved to the carry."),
                new Instruction(0xcb08, "rrc b", "", 2, TYPE.NONE, "Rotate register B right with branch carry", "The content of register B is rotated right.\r\nThe original content of bit 0 is moved to the carry flag as well as to bit 7."),
                new Instruction(0xcb09, "rrc c", "", 2, TYPE.NONE, "Rotate register C right with branch carry", "The content of register C is rotated right.\r\nThe original content of bit 0 is moved to the carry flag as well as to bit 7."),
                new Instruction(0xcb0a, "rrc d", "", 2, TYPE.NONE, "Rotate register D right with branch carry", "The content of register D is rotated right.\r\nThe original content of bit 0 is moved to the carry flag as well as to bit 7."),
                new Instruction(0xcb0b, "rrc e", "", 2, TYPE.NONE, "Rotate register E right with branch carry", "The content of register E is rotated right.\r\nThe original content of bit 0 is moved to the carry flag as well as to bit 7."),
                new Instruction(0xcb0c, "rrc h", "", 2, TYPE.NONE, "Rotate register H right with branch carry", "The content of register H is rotated right.\r\nThe original content of bit 0 is moved to the carry flag as well as to bit 7."),
                new Instruction(0xcb0d, "rrc l", "", 2, TYPE.NONE, "Rotate register L right with branch carry", "The content of register L is rotated right.\r\nThe original content of bit 0 is moved to the carry flag as well as to bit 7."),
                new Instruction(0xcb0e, "rrc (hl)", "", 2, TYPE.NONE, "Rotate indirectly addressed memory location (HL) right with branch carry", "The content of the memory location addressed by the content of the HL register pair is rotated right.\r\nThe original content of bit 0 is moved to the carry flag as well as to bit 7."),
                new Instruction(0xcb0f, "rrc a", "", 2, TYPE.NONE, "Rotate the accumulator right with branch carry", "The content of register A is rotated right.\r\nThe original content of bit 0 is moved to the carry flag as well as to bit 7."),
                new Instruction(0xcb10, "rl b", "", 2, TYPE.NONE, "Rotate register B left through carry", "The content of register B is shifted left one bit place.\r\nThe content of the carry flag is moved to bit 0 and the content of bit 7 is moved to the carry flag."),
                new Instruction(0xcb11, "rl c", "", 2, TYPE.NONE, "Rotate register C left through carry", "The content of register C is shifted left one bit place.\r\nThe content of the carry flag is moved to bit 0 and the content of bit 7 is moved to the carry flag."),
                new Instruction(0xcb12, "rl d", "", 2, TYPE.NONE, "Rotate register D left through carry", "The content of register D is shifted left one bit place.\r\nThe content of the carry flag is moved to bit 0 and the content of bit 7 is moved to the carry flag."),
                new Instruction(0xcb13, "rl e", "", 2, TYPE.NONE, "Rotate register E left through carry", "The content of register E is shifted left one bit place.\r\nThe content of the carry flag is moved to bit 0 and the content of bit 7 is moved to the carry flag."),
                new Instruction(0xcb14, "rl h", "", 2, TYPE.NONE, "Rotate register H left through carry", "The content of register H is shifted left one bit place.\r\nThe content of the carry flag is moved to bit 0 and the content of bit 7 is moved to the carry flag."),
                new Instruction(0xcb15, "rl l", "", 2, TYPE.NONE, "Rotate register L left through carry", "The content of register L is shifted left one bit place.\r\nThe content of the carry flag is moved to bit 0 and the content of bit 7 is moved to the carry flag."),
                new Instruction(0xcb16, "rl (hl)", "", 2, TYPE.NONE, "Rotate indirectly addressed memory location (HL) left through carry", "The content of the memory location addressed by the content of the HL register pair is shifted left one bit place.\r\nThe content of the carry flag is moved to bit 0 and the content of bit 7 is moved to the carry flag."),
                new Instruction(0xcb17, "rl a", "", 2, TYPE.NONE, "Rotate the accumulator left through carry", "The content of register A is shifted left one bit place.\r\nThe content of the carry flag is moved to bit 0 and the content of bit 7 is moved to the carry flag."),
                new Instruction(0xcb18, "rr b", "", 2, TYPE.NONE, "Rotate register B right through carry", "The content of register B is shifted right one bit place.\r\nThe content of the carry flag is moved to bit 7 and the content of bit 0 is moved to the carry flag."),
                new Instruction(0xcb19, "rr c", "", 2, TYPE.NONE, "Rotate register C right through carry", "The content of register C is shifted right one bit place.\r\nThe content of the carry flag is moved to bit 7 and the content of bit 0 is moved to the carry flag."),
                new Instruction(0xcb1a, "rr d", "", 2, TYPE.NONE, "Rotate register D right through carry", "The content of register D is shifted right one bit place.\r\nThe content of the carry flag is moved to bit 7 and the content of bit 0 is moved to the carry flag."),
                new Instruction(0xcb1b, "rr e", "", 2, TYPE.NONE, "Rotate register E right through carry", "The content of register E is shifted right one bit place.\r\nThe content of the carry flag is moved to bit 7 and the content of bit 0 is moved to the carry flag."),
                new Instruction(0xcb1c, "rr h", "", 2, TYPE.NONE, "Rotate register H right through carry", "The content of register H is shifted right one bit place.\r\nThe content of the carry flag is moved to bit 7 and the content of bit 0 is moved to the carry flag."),
                new Instruction(0xcb1d, "rr l", "", 2, TYPE.NONE, "Rotate register L right through carry", "The content of register L is shifted right one bit place.\r\nThe content of the carry flag is moved to bit 7 and the content of bit 0 is moved to the carry flag."),
                new Instruction(0xcb1e, "rr (hl)", "", 2, TYPE.NONE, "Rotate indirectly addressed memory location (HL) left through carry right through carry", "The content of the memory location addressed by the content of the HL register pair is shifted right one bit place.\r\nThe content of the carry flag is moved to bit 7 and the content of bit 0 is moved to the carry flag."),
                new Instruction(0xcb1f, "rr a", "", 2, TYPE.NONE, "Rotate the accumulator right through carry", "The content of register A is shifted right one bit place.\r\nThe content of the carry flag is moved to bit 7 and the content of bit 0 is moved to the carry flag."),
                new Instruction(0xcb20, "sla b", "", 2, TYPE.NONE, "Arithmetic shift left register B", "The content of register B is arithmetically shifted left with the contents of bit 7 being moved to the carry flag and a 0 being forced into bit 0."),
                new Instruction(0xcb21, "sla c", "", 2, TYPE.NONE, "Arithmetic shift left register C", "The content of register C is arithmetically shifted left with the contents of bit 7 being moved to the carry flag and a 0 being forced into bit 0."),
                new Instruction(0xcb22, "sla d", "", 2, TYPE.NONE, "Arithmetic shift left register D", "The content of register D is arithmetically shifted left with the contents of bit 7 being moved to the carry flag and a 0 being forced into bit 0."),
                new Instruction(0xcb23, "sla e", "", 2, TYPE.NONE, "Arithmetic shift left register E", "The content of register E is arithmetically shifted left with the contents of bit 7 being moved to the carry flag and a 0 being forced into bit 0."),
                new Instruction(0xcb24, "sla h", "", 2, TYPE.NONE, "Arithmetic shift left register H", "The content of register H is arithmetically shifted left with the contents of bit 7 being moved to the carry flag and a 0 being forced into bit 0."),
                new Instruction(0xcb25, "sla l", "", 2, TYPE.NONE, "Arithmetic shift left register L", "The content of register L is arithmetically shifted left with the contents of bit 7 being moved to the carry flag and a 0 being forced into bit 0."),
                new Instruction(0xcb26, "sla (hl)", "", 2, TYPE.NONE, "Arithmetic shift left indirectly addressed memory location (HL)", "The content of the memory location addressed by the content of the HL register pair is arithmetically shifted left with the contents of bit 7 being moved to the carry flag and a 0 being forced into bit 0."),
                new Instruction(0xcb27, "sla a", "", 2, TYPE.NONE, "Arithmetic shift left accumulator", "The content of register A is arithmetically shifted left with the contents of bit 7 being moved to the carry flag and a 0 being forced into bit 0."),
                new Instruction(0xcb28, "sra b", "", 2, TYPE.NONE, "Arithmetic shift right register B", "The content of register B is arithmetically shifted right.\r\nThe content of bit 0 is moved to the carry flag and the content of bit 7 remains unchanged."),
                new Instruction(0xcb29, "sra c", "", 2, TYPE.NONE, "Arithmetic shift right register C", "The content of register C is arithmetically shifted right.\r\nThe content of bit 0 is moved to the carry flag and the content of bit 7 remains unchanged."),
                new Instruction(0xcb2a, "sra d", "", 2, TYPE.NONE, "Arithmetic shift right register D", "The content of register D is arithmetically shifted right.\r\nThe content of bit 0 is moved to the carry flag and the content of bit 7 remains unchanged."),
                new Instruction(0xcb2b, "sra e", "", 2, TYPE.NONE, "Arithmetic shift right register E", "The content of register E is arithmetically shifted right.\r\nThe content of bit 0 is moved to the carry flag and the content of bit 7 remains unchanged."),
                new Instruction(0xcb2c, "sra h", "", 2, TYPE.NONE, "Arithmetic shift right register H", "The content of register H is arithmetically shifted right.\r\nThe content of bit 0 is moved to the carry flag and the content of bit 7 remains unchanged."),
                new Instruction(0xcb2d, "sra l", "", 2, TYPE.NONE, "Arithmetic shift right register L", "The content of register L is arithmetically shifted right.\r\nThe content of bit 0 is moved to the carry flag and the content of bit 7 remains unchanged."),
                new Instruction(0xcb2e, "sra (hl)", "", 2, TYPE.NONE, "Arithmetic shift right indirectly addressed memory location (HL)", "The content of the memory location addressed by the content of the HL register pair is arithmetically shifted right.\r\nThe content of bit 0 is moved to the carry flag and the content of bit 7 remains unchanged."),
                new Instruction(0xcb2f, "sra a", "", 2, TYPE.NONE, "Arithmetic shift right accumulator", "The content of register A is arithmetically shifted right.\r\nThe content of bit 0 is moved to the carry flag and the content of bit 7 remains unchanged."),
                new Instruction(0xcb30, "sll b", "", 2, TYPE.NONE, "Logical shift left register B", "The contents of register B is logically shifted left.\r\nA one is moved into bit 0 and the content of bit 7 is moved into the carry flag."),
                new Instruction(0xcb31, "sll c", "", 2, TYPE.NONE, "Logical shift left register C", "The contents of register C is logically shifted left.\r\nA one is moved into bit 0 and the content of bit 7 is moved into the carry flag."),
                new Instruction(0xcb32, "sll d", "", 2, TYPE.NONE, "Logical shift left register D", "The contents of register D is logically shifted left.\r\nA one is moved into bit 0 and the content of bit 7 is moved into the carry flag."),
                new Instruction(0xcb33, "sll e", "", 2, TYPE.NONE, "Logical shift left register E", "The contents of register E is logically shifted left.\r\nA one is moved into bit 0 and the content of bit 7 is moved into the carry flag."),
                new Instruction(0xcb34, "sll h", "", 2, TYPE.NONE, "Logical shift left register H", "The contents of register H is logically shifted left.\r\nA one is moved into bit 0 and the content of bit 7 is moved into the carry flag."),
                new Instruction(0xcb35, "sll l", "", 2, TYPE.NONE, "Logical shift left register L", "The contents of register L is logically shifted left.\r\nA one is moved into bit 0 and the content of bit 7 is moved into the carry flag."),
                new Instruction(0xcb36, "sll (hl)", "", 2, TYPE.NONE, "Logical shift left indirectly addressed memory location (HL)", "The content of the memory location addressed by the content of the HL register pair is logically shifted left.\r\nA one is moved into bit 0 and the content of bit 7 is moved into the carry flag."),
                new Instruction(0xcb37, "sll a", "", 2, TYPE.NONE, "Logical shift left accumulator", "The contents of register A is logically shifted left.\r\nA one is moved into bit 0 and the content of bit 7 is moved into the carry flag."),
                new Instruction(0xcb38, "srl b", "", 2, TYPE.NONE, "Logical shift right register B", "The contents of register B is logically shifted right.\r\nA zero is moved into bit 7 and the content of bit 0 is moved into the carry flag."),
                new Instruction(0xcb39, "srl c", "", 2, TYPE.NONE, "Logical shift right register C", "The contents of register C is logically shifted right.\r\nA zero is moved into bit 7 and the content of bit 0 is moved into the carry flag."),
                new Instruction(0xcb3a, "srl d", "", 2, TYPE.NONE, "Logical shift right register D", "The contents of register D is logically shifted right.\r\nA zero is moved into bit 7 and the content of bit 0 is moved into the carry flag."),
                new Instruction(0xcb3b, "srl e", "", 2, TYPE.NONE, "Logical shift right register E", "The contents of register E is logically shifted right.\r\nA zero is moved into bit 7 and the content of bit 0 is moved into the carry flag."),
                new Instruction(0xcb3c, "srl h", "", 2, TYPE.NONE, "Logical shift right register H", "The contents of register H is logically shifted right.\r\nA zero is moved into bit 7 and the content of bit 0 is moved into the carry flag."),
                new Instruction(0xcb3d, "srl l", "", 2, TYPE.NONE, "Logical shift right register L", "The contents of register L is logically shifted right.\r\nA zero is moved into bit 7 and the content of bit 0 is moved into the carry flag."),
                new Instruction(0xcb3e, "srl (hl)", "", 2, TYPE.NONE, "Logical shift right indirectly addressed memory location (HL)", "The content of the memory location addressed by the content of the HL register pair is logically shifted right.\r\nA zero is moved into bit 7 and the content of bit 0 is moved into the carry flag."),
                new Instruction(0xcb3f, "srl a", "", 2, TYPE.NONE, "Logical shift right accumulator", "The contents of register A is logically shifted right.\r\nA zero is moved into bit 7 and the content of bit 0 is moved into the carry flag."),
                new Instruction(0xcb40, "bit 0,b", "", 2, TYPE.NONE, "Test bit 0 of register B", "Bit 0 of register B is tested and the zero flag is set according to the results."),
                new Instruction(0xcb41, "bit 0,c", "", 2, TYPE.NONE, "Test bit 0 of register C", "Bit 0 of register C is tested and the zero flag is set according to the results."),
                new Instruction(0xcb42, "bit 0,d", "", 2, TYPE.NONE, "Test bit 0 of register D", "Bit 0 of register D is tested and the zero flag is set according to the results."),
                new Instruction(0xcb43, "bit 0,e", "", 2, TYPE.NONE, "Test bit 0 of register E", "Bit 0 of register E is tested and the zero flag is set according to the results."),
                new Instruction(0xcb44, "bit 0,h", "", 2, TYPE.NONE, "Test bit 0 of register H", "Bit 0 of register H is tested and the zero flag is set according to the results."),
                new Instruction(0xcb45, "bit 0,l", "", 2, TYPE.NONE, "Test bit 0 of register L", "Bit 0 of register L is tested and the zero flag is set according to the results."),
                new Instruction(0xcb46, "bit 0,(hl)", "", 2, TYPE.NONE, "Test bit 0 of indirectly addressed memory location (HL)", "Bit 0 of the memory location addressed by the content of the HL register pair is tested and the Z flag is set according to the result."),
                new Instruction(0xcb47, "bit 0,a", "", 2, TYPE.NONE, "Test bit 0 of register A", "Bit 0 of register A is tested and the zero flag is set according to the results."),
                new Instruction(0xcb48, "bit 1,b", "", 2, TYPE.NONE, "Test bit 1 of register B", "Bit 1 of register B is tested and the zero flag is set according to the results."),
                new Instruction(0xcb49, "bit 1,c", "", 2, TYPE.NONE, "Test bit 1 of register C", "Bit 1 of register C is tested and the zero flag is set according to the results."),
                new Instruction(0xcb4a, "bit 1,d", "", 2, TYPE.NONE, "Test bit 1 of register D", "Bit 1 of register D is tested and the zero flag is set according to the results."),
                new Instruction(0xcb4b, "bit 1,e", "", 2, TYPE.NONE, "Test bit 1 of register E", "Bit 1 of register E is tested and the zero flag is set according to the results."),
                new Instruction(0xcb4c, "bit 1,h", "", 2, TYPE.NONE, "Test bit 1 of register H", "Bit 1 of register H is tested and the zero flag is set according to the results."),
                new Instruction(0xcb4d, "bit 1,l", "", 2, TYPE.NONE, "Test bit 1 of register L", "Bit 1 of register L is tested and the zero flag is set according to the results."),
                new Instruction(0xcb4e, "bit 1,(hl)", "", 2, TYPE.NONE, "Test bit 1 of indirectly addressed memory location (HL)", "Bit 1 of the memory location addressed by the content of the HL register pair is tested and the Z flag is set according to the result."),
                new Instruction(0xcb4f, "bit 1,a", "", 2, TYPE.NONE, "Test bit 1 of register A", "Bit 1 of register A is tested and the zero flag is set according to the results."),
                new Instruction(0xcb50, "bit 2,b", "", 2, TYPE.NONE, "Test bit 2 of register B", "Bit 2 of register B is tested and the zero flag is set according to the results."),
                new Instruction(0xcb51, "bit 2,c", "", 2, TYPE.NONE, "Test bit 2 of register C", "Bit 2 of register C is tested and the zero flag is set according to the results."),
                new Instruction(0xcb52, "bit 2,d", "", 2, TYPE.NONE, "Test bit 2 of register D", "Bit 2 of register D is tested and the zero flag is set according to the results."),
                new Instruction(0xcb53, "bit 2,e", "", 2, TYPE.NONE, "Test bit 2 of register E", "Bit 2 of register E is tested and the zero flag is set according to the results."),
                new Instruction(0xcb54, "bit 2,h", "", 2, TYPE.NONE, "Test bit 2 of register H", "Bit 2 of register H is tested and the zero flag is set according to the results."),
                new Instruction(0xcb55, "bit 2,l", "", 2, TYPE.NONE, "Test bit 2 of register L", "Bit 2 of register L is tested and the zero flag is set according to the results."),
                new Instruction(0xcb56, "bit 2,(hl)", "", 2, TYPE.NONE, "Test bit 2 of indirectly addressed memory location (HL)", "Bit 2 of the memory location addressed by the content of the HL register pair is tested and the Z flag is set according to the result."),
                new Instruction(0xcb57, "bit 2,a", "", 2, TYPE.NONE, "Test bit 2 of register A", "Bit 2 of register A is tested and the zero flag is set according to the results."),
                new Instruction(0xcb58, "bit 3,b", "", 2, TYPE.NONE, "Test bit 3 of register B", "Bit 3 of register B is tested and the zero flag is set according to the results."),
                new Instruction(0xcb59, "bit 3,c", "", 2, TYPE.NONE, "Test bit 3 of register C", "Bit 3 of register C is tested and the zero flag is set according to the results."),
                new Instruction(0xcb5a, "bit 3,d", "", 2, TYPE.NONE, "Test bit 3 of register D", "Bit 3 of register D is tested and the zero flag is set according to the results."),
                new Instruction(0xcb5b, "bit 3,e", "", 2, TYPE.NONE, "Test bit 3 of register E", "Bit 3 of register E is tested and the zero flag is set according to the results."),
                new Instruction(0xcb5c, "bit 3,h", "", 2, TYPE.NONE, "Test bit 3 of register H", "Bit 3 of register H is tested and the zero flag is set according to the results."),
                new Instruction(0xcb5d, "bit 3,l", "", 2, TYPE.NONE, "Test bit 3 of register L", "Bit 3 of register L is tested and the zero flag is set according to the results."),
                new Instruction(0xcb5e, "bit 3,(hl)", "", 2, TYPE.NONE, "Test bit 3 of indirectly addressed memory location (HL)", "Bit 3 of the memory location addressed by the content of the HL register pair is tested and the Z flag is set according to the result."),
                new Instruction(0xcb5f, "bit 3,a", "", 2, TYPE.NONE, "Test bit 3 of register A", "Bit 3 of register A is tested and the zero flag is set according to the results."),
                new Instruction(0xcb60, "bit 4,b", "", 2, TYPE.NONE, "Test bit 4 of register B", "Bit 4 of register B is tested and the zero flag is set according to the results."),
                new Instruction(0xcb61, "bit 4,c", "", 2, TYPE.NONE, "Test bit 4 of register C", "Bit 4 of register C is tested and the zero flag is set according to the results."),
                new Instruction(0xcb62, "bit 4,d", "", 2, TYPE.NONE, "Test bit 4 of register D", "Bit 4 of register D is tested and the zero flag is set according to the results."),
                new Instruction(0xcb63, "bit 4,e", "", 2, TYPE.NONE, "Test bit 4 of register E", "Bit 4 of register E is tested and the zero flag is set according to the results."),
                new Instruction(0xcb64, "bit 4,h", "", 2, TYPE.NONE, "Test bit 4 of register H", "Bit 4 of register H is tested and the zero flag is set according to the results."),
                new Instruction(0xcb65, "bit 4,l", "", 2, TYPE.NONE, "Test bit 4 of register L", "Bit 4 of register L is tested and the zero flag is set according to the results."),
                new Instruction(0xcb66, "bit 4,(hl)", "", 2, TYPE.NONE, "Test bit 4 of indirectly addressed memory location (HL)", "Bit 4 of the memory location addressed by the content of the HL register pair is tested and the Z flag is set according to the result."),
                new Instruction(0xcb67, "bit 4,a", "", 2, TYPE.NONE, "Test bit 4 of register A", "Bit 4 of register A is tested and the zero flag is set according to the results."),
                new Instruction(0xcb68, "bit 5,b", "", 2, TYPE.NONE, "Test bit 5 of register B", "Bit 5 of register B is tested and the zero flag is set according to the results."),
                new Instruction(0xcb69, "bit 5,c", "", 2, TYPE.NONE, "Test bit 5 of register C", "Bit 5 of register C is tested and the zero flag is set according to the results."),
                new Instruction(0xcb6a, "bit 5,d", "", 2, TYPE.NONE, "Test bit 5 of register D", "Bit 5 of register D is tested and the zero flag is set according to the results."),
                new Instruction(0xcb6b, "bit 5,e", "", 2, TYPE.NONE, "Test bit 5 of register E", "Bit 5 of register E is tested and the zero flag is set according to the results."),
                new Instruction(0xcb6c, "bit 5,h", "", 2, TYPE.NONE, "Test bit 5 of register H", "Bit 5 of register H is tested and the zero flag is set according to the results."),
                new Instruction(0xcb6d, "bit 5,l", "", 2, TYPE.NONE, "Test bit 5 of register L", "Bit 5 of register L is tested and the zero flag is set according to the results."),
                new Instruction(0xcb6e, "bit 5,(hl)", "", 2, TYPE.NONE, "Test bit 5 of indirectly addressed memory location (HL)", "Bit 5 of the memory location addressed by the content of the HL register pair is tested and the Z flag is set according to the result."),
                new Instruction(0xcb6f, "bit 5,a", "", 2, TYPE.NONE, "Test bit 5 of register A", "Bit 5 of register A is tested and the zero flag is set according to the results."),
                new Instruction(0xcb70, "bit 6,b", "", 2, TYPE.NONE, "Test bit 6 of register B", "Bit 6 of register B is tested and the zero flag is set according to the results."),
                new Instruction(0xcb71, "bit 6,c", "", 2, TYPE.NONE, "Test bit 6 of register C", "Bit 6 of register C is tested and the zero flag is set according to the results."),
                new Instruction(0xcb72, "bit 6,d", "", 2, TYPE.NONE, "Test bit 6 of register D", "Bit 6 of register D is tested and the zero flag is set according to the results."),
                new Instruction(0xcb73, "bit 6,e", "", 2, TYPE.NONE, "Test bit 6 of register E", "Bit 6 of register E is tested and the zero flag is set according to the results."),
                new Instruction(0xcb74, "bit 6,h", "", 2, TYPE.NONE, "Test bit 6 of register H", "Bit 6 of register H is tested and the zero flag is set according to the results."),
                new Instruction(0xcb75, "bit 6,l", "", 2, TYPE.NONE, "Test bit 6 of register L", "Bit 6 of register L is tested and the zero flag is set according to the results."),
                new Instruction(0xcb76, "bit 6,(hl)", "", 2, TYPE.NONE, "Test bit 6 of indirectly addressed memory location (HL)", "Bit 6 of the memory location addressed by the content of the HL register pair is tested and the Z flag is set according to the result."),
                new Instruction(0xcb77, "bit 6,a", "", 2, TYPE.NONE, "Test bit 6 of register A", "Bit 6 of register A is tested and the zero flag is set according to the results."),
                new Instruction(0xcb78, "bit 7,b", "", 2, TYPE.NONE, "Test bit 7 of register B", "Bit 7 of register B is tested and the zero flag is set according to the results."),
                new Instruction(0xcb79, "bit 7,c", "", 2, TYPE.NONE, "Test bit 7 of register C", "Bit 7 of register C is tested and the zero flag is set according to the results."),
                new Instruction(0xcb7a, "bit 7,d", "", 2, TYPE.NONE, "Test bit 7 of register D", "Bit 7 of register D is tested and the zero flag is set according to the results."),
                new Instruction(0xcb7b, "bit 7,e", "", 2, TYPE.NONE, "Test bit 7 of register E", "Bit 7 of register E is tested and the zero flag is set according to the results."),
                new Instruction(0xcb7c, "bit 7,h", "", 2, TYPE.NONE, "Test bit 7 of register H", "Bit 7 of register H is tested and the zero flag is set according to the results."),
                new Instruction(0xcb7d, "bit 7,l", "", 2, TYPE.NONE, "Test bit 7 of register L", "Bit 7 of register L is tested and the zero flag is set according to the results."),
                new Instruction(0xcb7e, "bit 7,(hl)", "", 2, TYPE.NONE, "Test bit 7 of indirectly addressed memory location (HL)", "Bit 7 of the memory location addressed by the content of the HL register pair is tested and the Z flag is set according to the result."),
                new Instruction(0xcb7f, "bit 7,a", "", 2, TYPE.NONE, "Test bit 7 of register A", "Bit 7 of register A is tested and the zero flag is set according to the results."),
                new Instruction(0xcb80, "res 0,b", "", 2, TYPE.NONE, "Reset bit 0 of register B", "Bit 0 of register B is reset."),
                new Instruction(0xcb81, "res 0,c", "", 2, TYPE.NONE, "Reset bit 0 of register C", "Bit 0 of register C is reset."),
                new Instruction(0xcb82, "res 0,d", "", 2, TYPE.NONE, "Reset bit 0 of register D", "Bit 0 of register D is reset."),
                new Instruction(0xcb83, "res 0,e", "", 2, TYPE.NONE, "Reset bit 0 of register E", "Bit 0 of register E is reset."),
                new Instruction(0xcb84, "res 0,h", "", 2, TYPE.NONE, "Reset bit 0 of register H", "Bit 0 of register H is reset."),
                new Instruction(0xcb85, "res 0,l", "", 2, TYPE.NONE, "Reset bit 0 of register L", "Bit 0 of register L is reset."),
                new Instruction(0xcb86, "res 0,(hl)", "", 2, TYPE.NONE, "Reset bit 0 of indirectly addressed memory location (HL)", "Bit 0 of the memory location addressed by the content of the HL register pair is reset."),
                new Instruction(0xcb87, "res 0,a", "", 2, TYPE.NONE, "Reset bit 0 of register A", "Bit 0 of register A is reset."),
                new Instruction(0xcb88, "res 1,b", "", 2, TYPE.NONE, "Reset bit 1 of register B", "Bit 1 of register B is reset."),
                new Instruction(0xcb89, "res 1,c", "", 2, TYPE.NONE, "Reset bit 1 of register C", "Bit 1 of register C is reset."),
                new Instruction(0xcb8a, "res 1,d", "", 2, TYPE.NONE, "Reset bit 1 of register D", "Bit 1 of register D is reset."),
                new Instruction(0xcb8b, "res 1,e", "", 2, TYPE.NONE, "Reset bit 1 of register E", "Bit 1 of register E is reset."),
                new Instruction(0xcb8c, "res 1,h", "", 2, TYPE.NONE, "Reset bit 1 of register H", "Bit 1 of register H is reset."),
                new Instruction(0xcb8d, "res 1,l", "", 2, TYPE.NONE, "Reset bit 1 of register L", "Bit 1 of register L is reset."),
                new Instruction(0xcb8e, "res 1,(hl)", "", 2, TYPE.NONE, "Reset bit 1 of indirectly addressed memory location (HL)", "Bit 1 of the memory location addressed by the content of the HL register pair is reset."),
                new Instruction(0xcb8f, "res 1,a", "", 2, TYPE.NONE, "Reset bit 1 of register A", "Bit 1 of register A is reset."),
                new Instruction(0xcb90, "res 2,b", "", 2, TYPE.NONE, "Reset bit 2 of register B", "Bit 2 of register B is reset."),
                new Instruction(0xcb91, "res 2,c", "", 2, TYPE.NONE, "Reset bit 2 of register C", "Bit 2 of register C is reset."),
                new Instruction(0xcb92, "res 2,d", "", 2, TYPE.NONE, "Reset bit 2 of register D", "Bit 2 of register D is reset."),
                new Instruction(0xcb93, "res 2,e", "", 2, TYPE.NONE, "Reset bit 2 of register E", "Bit 2 of register E is reset."),
                new Instruction(0xcb94, "res 2,h", "", 2, TYPE.NONE, "Reset bit 2 of register H", "Bit 2 of register H is reset."),
                new Instruction(0xcb95, "res 2,l", "", 2, TYPE.NONE, "Reset bit 2 of register L", "Bit 2 of register L is reset."),
                new Instruction(0xcb96, "res 2,(hl)", "", 2, TYPE.NONE, "Reset bit 2 of indirectly addressed memory location (HL)", "Bit 2 of the memory location addressed by the content of the HL register pair is reset."),
                new Instruction(0xcb97, "res 2,a", "", 2, TYPE.NONE, "Reset bit 2 of register A", "Bit 2 of register A is reset."),
                new Instruction(0xcb98, "res 3,b", "", 2, TYPE.NONE, "Reset bit 3 of register B", "Bit 3 of register B is reset."),
                new Instruction(0xcb99, "res 3,c", "", 2, TYPE.NONE, "Reset bit 3 of register C", "Bit 3 of register C is reset."),
                new Instruction(0xcb9a, "res 3,d", "", 2, TYPE.NONE, "Reset bit 3 of register D", "Bit 3 of register D is reset."),
                new Instruction(0xcb9b, "res 3,e", "", 2, TYPE.NONE, "Reset bit 3 of register E", "Bit 3 of register E is reset."),
                new Instruction(0xcb9c, "res 3,h", "", 2, TYPE.NONE, "Reset bit 3 of register H", "Bit 3 of register H is reset."),
                new Instruction(0xcb9d, "res 3,l", "", 2, TYPE.NONE, "Reset bit 3 of register L", "Bit 3 of register L is reset."),
                new Instruction(0xcb9e, "res 3,(hl)", "", 2, TYPE.NONE, "Reset bit 3 of indirectly addressed memory location (HL)", "Bit 3 of the memory location addressed by the content of the HL register pair is reset."),
                new Instruction(0xcb9f, "res 3,a", "", 2, TYPE.NONE, "Reset bit 3 of register A", "Bit 3 of register A is reset."),
                new Instruction(0xcba0, "res 4,b", "", 2, TYPE.NONE, "Reset bit 4 of register B", "Bit 4 of register B is reset."),
                new Instruction(0xcba1, "res 4,c", "", 2, TYPE.NONE, "Reset bit 4 of register C", "Bit 4 of register C is reset."),
                new Instruction(0xcba2, "res 4,d", "", 2, TYPE.NONE, "Reset bit 4 of register D", "Bit 4 of register D is reset."),
                new Instruction(0xcba3, "res 4,e", "", 2, TYPE.NONE, "Reset bit 4 of register E", "Bit 4 of register E is reset."),
                new Instruction(0xcba4, "res 4,h", "", 2, TYPE.NONE, "Reset bit 4 of register H", "Bit 4 of register H is reset."),
                new Instruction(0xcba5, "res 4,l", "", 2, TYPE.NONE, "Reset bit 4 of register L", "Bit 4 of register L is reset."),
                new Instruction(0xcba6, "res 4,(hl)", "", 2, TYPE.NONE, "Reset bit 4 of indirectly addressed memory location (HL)", "Bit 4 of the memory location addressed by the content of the HL register pair is reset."),
                new Instruction(0xcba7, "res 4,a", "", 2, TYPE.NONE, "Reset bit 4 of register A", "Bit 4 of register A is reset."),
                new Instruction(0xcba8, "res 5,b", "", 2, TYPE.NONE, "Reset bit 5 of register B", "Bit 5 of register B is reset."),
                new Instruction(0xcba9, "res 5,c", "", 2, TYPE.NONE, "Reset bit 5 of register C", "Bit 5 of register C is reset."),
                new Instruction(0xcbaa, "res 5,d", "", 2, TYPE.NONE, "Reset bit 5 of register D", "Bit 5 of register D is reset."),
                new Instruction(0xcbab, "res 5,e", "", 2, TYPE.NONE, "Reset bit 5 of register E", "Bit 5 of register E is reset."),
                new Instruction(0xcbac, "res 5,h", "", 2, TYPE.NONE, "Reset bit 5 of register H", "Bit 5 of register H is reset."),
                new Instruction(0xcbad, "res 5,l", "", 2, TYPE.NONE, "Reset bit 5 of register L", "Bit 5 of register L is reset."),
                new Instruction(0xcbae, "res 5,(hl)", "", 2, TYPE.NONE, "Reset bit 5 of indirectly addressed memory location (HL)", "Bit 5 of the memory location addressed by the content of the HL register pair is reset."),
                new Instruction(0xcbaf, "res 5,a", "", 2, TYPE.NONE, "Reset bit 5 of register A", "Bit 5 of register A is reset."),
                new Instruction(0xcbb0, "res 6,b", "", 2, TYPE.NONE, "Reset bit 6 of register B", "Bit 6 of register B is reset."),
                new Instruction(0xcbb1, "res 6,c", "", 2, TYPE.NONE, "Reset bit 6 of register C", "Bit 6 of register C is reset."),
                new Instruction(0xcbb2, "res 6,d", "", 2, TYPE.NONE, "Reset bit 6 of register D", "Bit 6 of register D is reset."),
                new Instruction(0xcbb3, "res 6,e", "", 2, TYPE.NONE, "Reset bit 6 of register E", "Bit 6 of register E is reset."),
                new Instruction(0xcbb4, "res 6,h", "", 2, TYPE.NONE, "Reset bit 6 of register H", "Bit 6 of register H is reset."),
                new Instruction(0xcbb5, "res 6,l", "", 2, TYPE.NONE, "Reset bit 6 of register L", "Bit 6 of register L is reset."),
                new Instruction(0xcbb6, "res 6,(hl)", "", 2, TYPE.NONE, "Reset bit 6 of indirectly addressed memory location (HL)", "Bit 6 of the memory location addressed by the content of the HL register pair is reset."),
                new Instruction(0xcbb7, "res 6,a", "", 2, TYPE.NONE, "Reset bit 6 of register A", "Bit 6 of register A is reset."),
                new Instruction(0xcbb8, "res 7,b", "", 2, TYPE.NONE, "Reset bit 7 of register B", "Bit 7 of register B is reset."),
                new Instruction(0xcbb9, "res 7,c", "", 2, TYPE.NONE, "Reset bit 7 of register C", "Bit 7 of register C is reset."),
                new Instruction(0xcbba, "res 7,d", "", 2, TYPE.NONE, "Reset bit 7 of register D", "Bit 7 of register D is reset."),
                new Instruction(0xcbbb, "res 7,e", "", 2, TYPE.NONE, "Reset bit 7 of register E", "Bit 7 of register E is reset."),
                new Instruction(0xcbbc, "res 7,h", "", 2, TYPE.NONE, "Reset bit 7 of register H", "Bit 7 of register H is reset."),
                new Instruction(0xcbbd, "res 7,l", "", 2, TYPE.NONE, "Reset bit 7 of register L", "Bit 7 of register L is reset."),
                new Instruction(0xcbbe, "res 7,(hl)", "", 2, TYPE.NONE, "Reset bit 7 of indirectly addressed memory location (HL)", "Bit 7 of the memory location addressed by the content of the HL register pair is reset."),
                new Instruction(0xcbbf, "res 7,a", "", 2, TYPE.NONE, "Reset bit 7 of register A", "Bit 7 of register A is reset."),
                new Instruction(0xcbc0, "set 0,b", "", 2, TYPE.NONE, "Set bit 0 of register B", "Bit 0 of register B is set."),
                new Instruction(0xcbc1, "set 0,c", "", 2, TYPE.NONE, "Set bit 0 of register C", "Bit 0 of register C is set."),
                new Instruction(0xcbc2, "set 0,d", "", 2, TYPE.NONE, "Set bit 0 of register D", "Bit 0 of register D is set."),
                new Instruction(0xcbc3, "set 0,e", "", 2, TYPE.NONE, "Set bit 0 of register E", "Bit 0 of register E is set."),
                new Instruction(0xcbc4, "set 0,h", "", 2, TYPE.NONE, "Set bit 0 of register H", "Bit 0 of register H is set."),
                new Instruction(0xcbc5, "set 0,l", "", 2, TYPE.NONE, "Set bit 0 of register L", "Bit 0 of register L is set."),
                new Instruction(0xcbc6, "set 0,(hl)", "", 2, TYPE.NONE, "Set bit 0 of indirectly addressed memory location (HL)", "Bit 0 of the memory location addressed by the content of the HL register pair is set."),
                new Instruction(0xcbc7, "set 0,a", "", 2, TYPE.NONE, "Set bit 0 of register A", "Bit 0 of register A is set."),
                new Instruction(0xcbc8, "set 1,b", "", 2, TYPE.NONE, "Set bit 1 of register B", "Bit 1 of register B is set."),
                new Instruction(0xcbc9, "set 1,c", "", 2, TYPE.NONE, "Set bit 1 of register C", "Bit 1 of register C is set."),
                new Instruction(0xcbca, "set 1,d", "", 2, TYPE.NONE, "Set bit 1 of register D", "Bit 1 of register D is set."),
                new Instruction(0xcbcb, "set 1,e", "", 2, TYPE.NONE, "Set bit 1 of register E", "Bit 1 of register E is set."),
                new Instruction(0xcbcc, "set 1,h", "", 2, TYPE.NONE, "Set bit 1 of register H", "Bit 1 of register H is set."),
                new Instruction(0xcbcd, "set 1,l", "", 2, TYPE.NONE, "Set bit 1 of register L", "Bit 1 of register L is set."),
                new Instruction(0xcbce, "set 1,(hl)", "", 2, TYPE.NONE, "Set bit 1 of indirectly addressed memory location (HL)", "Bit 1 of the memory location addressed by the content of the HL register pair is set."),
                new Instruction(0xcbcf, "set 1,a", "", 2, TYPE.NONE, "Set bit 1 of register A", "Bit 1 of register A is set."),
                new Instruction(0xcbd0, "set 2,b", "", 2, TYPE.NONE, "Set bit 2 of register B", "Bit 2 of register B is set."),
                new Instruction(0xcbd1, "set 2,c", "", 2, TYPE.NONE, "Set bit 2 of register C", "Bit 2 of register C is set."),
                new Instruction(0xcbd2, "set 2,d", "", 2, TYPE.NONE, "Set bit 2 of register D", "Bit 2 of register D is set."),
                new Instruction(0xcbd3, "set 2,e", "", 2, TYPE.NONE, "Set bit 2 of register E", "Bit 2 of register E is set."),
                new Instruction(0xcbd4, "set 2,h", "", 2, TYPE.NONE, "Set bit 2 of register H", "Bit 2 of register H is set."),
                new Instruction(0xcbd5, "set 2,l", "", 2, TYPE.NONE, "Set bit 2 of register L", "Bit 2 of register L is set."),
                new Instruction(0xcbd6, "set 2,(hl)", "", 2, TYPE.NONE, "Set bit 2 of indirectly addressed memory location (HL)", "Bit 2 of the memory location addressed by the content of the HL register pair is set."),
                new Instruction(0xcbd7, "set 2,a", "", 2, TYPE.NONE, "Set bit 2 of register A", "Bit 2 of register A is set."),
                new Instruction(0xcbd8, "set 3,b", "", 2, TYPE.NONE, "Set bit 3 of register B", "Bit 3 of register B is set."),
                new Instruction(0xcbd9, "set 3,c", "", 2, TYPE.NONE, "Set bit 3 of register C", "Bit 3 of register C is set."),
                new Instruction(0xcbda, "set 3,d", "", 2, TYPE.NONE, "Set bit 3 of register D", "Bit 3 of register D is set."),
                new Instruction(0xcbdb, "set 3,e", "", 2, TYPE.NONE, "Set bit 3 of register E", "Bit 3 of register E is set."),
                new Instruction(0xcbdc, "set 3,h", "", 2, TYPE.NONE, "Set bit 3 of register H", "Bit 3 of register H is set."),
                new Instruction(0xcbdd, "set 3,l", "", 2, TYPE.NONE, "Set bit 3 of register L", "Bit 3 of register L is set."),
                new Instruction(0xcbde, "set 3,(hl)", "", 2, TYPE.NONE, "Set bit 3 of indirectly addressed memory location (HL)", "Bit 3 of the memory location addressed by the content of the HL register pair is set."),
                new Instruction(0xcbdf, "set 3,a", "", 2, TYPE.NONE, "Set bit 3 of register A", "Bit 3 of register A is set."),
                new Instruction(0xcbe0, "set 4,b", "", 2, TYPE.NONE, "Set bit 4 of register B", "Bit 4 of register B is set."),
                new Instruction(0xcbe1, "set 4,c", "", 2, TYPE.NONE, "Set bit 4 of register C", "Bit 4 of register C is set."),
                new Instruction(0xcbe2, "set 4,d", "", 2, TYPE.NONE, "Set bit 4 of register D", "Bit 4 of register D is set."),
                new Instruction(0xcbe3, "set 4,e", "", 2, TYPE.NONE, "Set bit 4 of register E", "Bit 4 of register E is set."),
                new Instruction(0xcbe4, "set 4,h", "", 2, TYPE.NONE, "Set bit 4 of register H", "Bit 4 of register H is set."),
                new Instruction(0xcbe5, "set 4,l", "", 2, TYPE.NONE, "Set bit 4 of register L", "Bit 4 of register L is set."),
                new Instruction(0xcbe6, "set 4,(hl)", "", 2, TYPE.NONE, "Set bit 4 of indirectly addressed memory location (HL)", "Bit 4 of the memory location addressed by the content of the HL register pair is set."),
                new Instruction(0xcbe7, "set 4,a", "", 2, TYPE.NONE, "Set bit 4 of register A", "Bit 4 of register A is set."),
                new Instruction(0xcbe8, "set 5,b", "", 2, TYPE.NONE, "Set bit 5 of register B", "Bit 5 of register B is set."),
                new Instruction(0xcbe9, "set 5,c", "", 2, TYPE.NONE, "Set bit 5 of register C", "Bit 5 of register C is set."),
                new Instruction(0xcbea, "set 5,d", "", 2, TYPE.NONE, "Set bit 5 of register D", "Bit 5 of register D is set."),
                new Instruction(0xcbeb, "set 5,e", "", 2, TYPE.NONE, "Set bit 5 of register E", "Bit 5 of register E is set."),
                new Instruction(0xcbec, "set 5,h", "", 2, TYPE.NONE, "Set bit 5 of register H", "Bit 5 of register H is set."),
                new Instruction(0xcbed, "set 5,l", "", 2, TYPE.NONE, "Set bit 5 of register L", "Bit 5 of register L is set."),
                new Instruction(0xcbee, "set 5,(hl)", "", 2, TYPE.NONE, "Set bit 5 of indirectly addressed memory location (HL)", "Bit 5 of the memory location addressed by the content of the HL register pair is set."),
                new Instruction(0xcbef, "set 5,a", "", 2, TYPE.NONE, "Set bit 5 of register A", "Bit 5 of register A is set."),
                new Instruction(0xcbf0, "set 6,b", "", 2, TYPE.NONE, "Set bit 6 of register B", "Bit 6 of register B is set."),
                new Instruction(0xcbf1, "set 6,c", "", 2, TYPE.NONE, "Set bit 6 of register C", "Bit 6 of register C is set."),
                new Instruction(0xcbf2, "set 6,d", "", 2, TYPE.NONE, "Set bit 6 of register D", "Bit 6 of register D is set."),
                new Instruction(0xcbf3, "set 6,e", "", 2, TYPE.NONE, "Set bit 6 of register E", "Bit 6 of register E is set."),
                new Instruction(0xcbf4, "set 6,h", "", 2, TYPE.NONE, "Set bit 6 of register H", "Bit 6 of register H is set."),
                new Instruction(0xcbf5, "set 6,l", "", 2, TYPE.NONE, "Set bit 6 of register L", "Bit 6 of register L is set."),
                new Instruction(0xcbf6, "set 6,(hl)", "", 2, TYPE.NONE, "Set bit 6 of indirectly addressed memory location (HL)", "Bit 6 of the memory location addressed by the content of the HL register pair is set."),
                new Instruction(0xcbf7, "set 6,a", "", 2, TYPE.NONE, "Set bit 6 of register A", "Bit 6 of register A is set."),
                new Instruction(0xcbf8, "set 7,b", "", 2, TYPE.NONE, "Set bit 7 of register B", "Bit 7 of register B is set."),
                new Instruction(0xcbf9, "set 7,c", "", 2, TYPE.NONE, "Set bit 7 of register C", "Bit 7 of register C is set."),
                new Instruction(0xcbfa, "set 7,d", "", 2, TYPE.NONE, "Set bit 7 of register D", "Bit 7 of register D is set."),
                new Instruction(0xcbfb, "set 7,e", "", 2, TYPE.NONE, "Set bit 7 of register E", "Bit 7 of register E is set."),
                new Instruction(0xcbfc, "set 7,h", "", 2, TYPE.NONE, "Set bit 7 of register H", "Bit 7 of register H is set."),
                new Instruction(0xcbfd, "set 7,l", "", 2, TYPE.NONE, "Set bit 7 of register L", "Bit 7 of register L is set."),
                new Instruction(0xcbfe, "set 7,(hl)", "", 2, TYPE.NONE, "Set bit 7 of indirectly addressed memory location (HL)", "Bit 7 of the memory location addressed by the content of the HL register pair is set."),
                new Instruction(0xcbff, "set 7,a", "", 2, TYPE.NONE, "Set bit 7 of register A", "Bit 7 of register A is set.")
            };

            #endregion
  
            #region Instructions (IX)

            // IX instructions
            Z80IXInstructions = new Instruction[]
            {
                new Instruction(0xdd00, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd01, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd02, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd03, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd04, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd05, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd06, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd07, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd08, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd09, "add ix,bc", "", 2, TYPE.NONE, "Add IX to register pair BC", "The content of the IX register is added to the cojp ntent of register pair BC and the result is stored back in IX."),
                new Instruction(0xdd0a, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd0b, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd0c, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd0d, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd0e, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd0f, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd10, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd11, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd12, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd13, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd14, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd15, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd16, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd17, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd18, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd19, "add ix,de", "", 2, TYPE.NONE, "Add IX to register pair DE", "The content of the IX register is added to the content of register pair DE and the result is stored back in IX."),
                new Instruction(0xdd1a, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd1b, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd1c, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd1d, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd1e, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd1f, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd20, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd21, "ld ix,nn", "", 4, TYPE.NONE, "Load register IX with immediate data nn", "The content of the two memory locations immediately following the opcode is loaded into register IX.\r\nThe lower order byte of the data occurs immediately after the opcode."),
                new Instruction(0xdd22, "ld (nn),ix", "", 4, TYPE.NONE, "Load memory locations addressed by nn from IX", "The content of the low order of the IX register is loaded into the memory location addressed by the content of the memory location immediately following the opcode.\r\nThe content of the high order of the IX register is loaded into the memory location immediately following the one loaded from the low order.\r\nThe low order of the nn address occurs immediately after the op code."),
                new Instruction(0xdd23, "inc ix", "", 2, TYPE.NONE, "Increment register IX", "The content of register IX is incremented and stored back at register IX."),
                new Instruction(0xdd24, "inc ixh", "", 2, TYPE.NONE, "Increment of high byte of register IX", "The high byte of the content of register IX is incremented and stored back at register IX."),
                new Instruction(0xdd25, "dec ixh", "", 2, TYPE.NONE, "Decrement of high byte of register IX", "The high byte of the content of register IX is decremented and stored back at register IX."),
                new Instruction(0xdd26, "ld ixh,n", "", 3, TYPE.NONE, "Load the high byte of register IX with immediate data n", "The content of the memory location immediately following the opcode location is loaded into the high byte of register IX"),
                new Instruction(0xdd27, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd28, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd29, "add ix,ix", "", 2, TYPE.NONE, "Add IX to register IX", "The content of the IX register is added to the content of register IX and the result is stored back in IX."),
                new Instruction(0xdd2a, "ld ix,(nn)", "", 4, TYPE.NONE, "Load regiter IX from memory locations addressed by nn", "The content of the memory location addressed by the memory locations immediately following the opcode is loaded into the high order byte of register IX.\r\nThe content of the memory location immediately following the one previously loaded are then loaded into the low order byte of register IX.\r\nThe low order byte of the nn address immediately follows the opcode."),
                new Instruction(0xdd2b, "dec ix", "", 2, TYPE.NONE, "Decrement register IX", "The content of register IX is decremented and stored back at register IX."),
                new Instruction(0xdd2c, "inc ixl", "", 2, TYPE.NONE, "Increment of low byte of register IX", "The low byte of the content of register IX is incremented and stored back at register IX."),
                new Instruction(0xdd2d, "dec ixl", "", 2, TYPE.NONE, "Decrement of low byte of register IX", "The low byte of the content of register IX is decremented and stored back at register IX."),
                new Instruction(0xdd2e, "ld ixl,n", "", 3, TYPE.NONE, "Load the low byte of register IX with immediate data n", "The content of the memory location immediately following the opcode location is loaded into the low byte of register IX"),
                new Instruction(0xdd2f, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd30, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd31, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd32, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd33, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd34, "inc (ix+o)", "", 3, TYPE.NONE, "Increment indexed addressed memory location (IX + o)", "The memory location specified by (IX + offset) is incremented."),
                new Instruction(0xdd35, "dec (ix+o)", "", 3, TYPE.NONE, "Decrement indexed addressed memory location (IX + o)", "The memory location specified by (IX + offset) is decremented."),
                new Instruction(0xdd36, "ld (ix+o),n", "", 4, TYPE.NONE, "Load indexed addressed memory location (IX + o) with immediate data n", "The content of the memory location immediately following the offset is transferred into the memory location addressed by the content of the index register plus the given offset value."),
                new Instruction(0xdd37, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd38, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd39, "add ix,sp", "", 2, TYPE.NONE, "Add IX to the stack pointer (SP)", "The content of the IX register is added to the content of the stack pointer (SP) and the result is stored back in IX."),
                new Instruction(0xdd3a, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd3b, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd3c, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd3d, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd3e, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd3f, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd40, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd41, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd42, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd43, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd44, "ld b,ixh", "", 2, TYPE.NONE, "Load register B from the high byte of register IX", "The content of the high byte of register IX is loaded into the register B."),
                new Instruction(0xdd45, "ld b,ixl", "", 2, TYPE.NONE, "Load register B from the low byte of register IX", "The content of the low byte of register IX is loaded into the register B."),
                new Instruction(0xdd46, "ld b,(ix+o)", "", 3, TYPE.NONE, "Load register B indirect from indexed memory location (IX + o)", "The content of the memory location addressed by the IX index register plus the given offset value is loaded into register B"),
                new Instruction(0xdd47, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd48, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd49, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd4a, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd4b, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd4c, "ld c,ixh", "", 2, TYPE.NONE, "Load register C from the high byte of register IX", "The content of the high byte of register IX is loaded into the register C."),
                new Instruction(0xdd4d, "ld c,ixl", "", 2, TYPE.NONE, "Load register C from the low byte of register IX", "The content of the low byte of register IX is loaded into the register C."),
                new Instruction(0xdd4e, "ld c,(ix+o)", "", 3, TYPE.NONE, "Load register C indirect from indexed memory location (IX + o)", "The content of the memory location addressed by the IX index register plus the given offset value is loaded into register C"),
                new Instruction(0xdd4f, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd50, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd51, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd52, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd53, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd54, "ld d,ixh", "", 2, TYPE.NONE, "Load register D from the high byte of register IX", "The content of the high byte of register IX is loaded into the register D."),
                new Instruction(0xdd55, "ld d,ixl", "", 2, TYPE.NONE, "Load register D from the low byte of register IX", "The content of the low byte of register IX is loaded into the register D."),
                new Instruction(0xdd56, "ld d,(ix+o)", "", 3, TYPE.NONE, "Load register D indirect from indexed memory location (IX + o)", "The content of the memory location addressed by the IX index register plus the given offset value is loaded into register D"),
                new Instruction(0xdd57, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd58, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd59, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd5a, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd5b, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd5c, "ld e,ixh", "", 2, TYPE.NONE, "Load register E from the high byte of register IX", "The content of the high byte of register IX is loaded into the register E."),
                new Instruction(0xdd5d, "ld e,ixl", "", 2, TYPE.NONE, "Load register E from the low byte of register IX", "The content of the low byte of register IX is loaded into the register E."),
                new Instruction(0xdd5e, "ld e,(ix+o)", "", 3, TYPE.NONE, "Load register E indirect from indexed memory location (IX + o)", "The content of the memory location addressed by the IX index register plus the given offset value is loaded into register E"),
                new Instruction(0xdd5f, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd60, "ld ixh,b", "", 2, TYPE.NONE, "Load the high byte of register IX from register B", "The content of register B is loaded into the high byte of register IX."),
                new Instruction(0xdd61, "ld ixh,c", "", 2, TYPE.NONE, "Load the high byte of register IX from register C", "The content of register C is loaded into the high byte of register IX."),
                new Instruction(0xdd62, "ld ixh,d", "", 2, TYPE.NONE, "Load the high byte of register IX from register D", "The content of register D is loaded into the high byte of register IX."),
                new Instruction(0xdd63, "ld ixh,e", "", 2, TYPE.NONE, "Load the high byte of register IX from register E", "The content of register E is loaded into the high byte of register IX."),
                new Instruction(0xdd64, "ld ixh,ixh", "", 2, TYPE.NONE, "Load the high byte of register IX from the high byte of register IX", "The content of the high byte of register IX is loaded into the high byte of register IX."),
                new Instruction(0xdd65, "ld ixh,ixl", "", 2, TYPE.NONE, "Load the high byte of register IX from the low byte of register IX", "The content of the low byte of register IX is loaded into the high byte of register IX."),
                new Instruction(0xdd66, "ld h,(ix+o)", "", 3, TYPE.NONE, "Load register H indirect from indexed memory location (IX + o)", "The content of the memory location addressed by the IX index register plus the given offset value is loaded into register H"),
                new Instruction(0xdd67, "ld ixh,a", "", 2, TYPE.NONE, "Load the high byte of register IX from the accumulator", "The content of register A is loaded into the high byte of register IX."),
                new Instruction(0xdd68, "ld ixl,b", "", 2, TYPE.NONE, "Load the low byte of register IX from register B", "The content of register B is loaded into the low byte of register IX."),
                new Instruction(0xdd69, "ld ixl,c", "", 2, TYPE.NONE, "Load the low byte of register IX from register C", "The content of register C is loaded into the low byte of register IX."),
                new Instruction(0xdd6a, "ld ixl,d", "", 2, TYPE.NONE, "Load the low byte of register IX from register D", "The content of register D is loaded into the low byte of register IX."),
                new Instruction(0xdd6b, "ld ixl,e", "", 2, TYPE.NONE, "Load the low byte of register IX from register E", "The content of register E is loaded into the low byte of register IX."),
                new Instruction(0xdd6c, "ld ixl,ixh", "", 2, TYPE.NONE, "Load the low byte of register IX from the high byte of register IX", "The content of the high byte of register IX is loaded into the low byte of register IX."),
                new Instruction(0xdd6d, "ld ixl,ixl", "", 2, TYPE.NONE, "Load the low byte of register IX from the low byte of register IX", "The content of the low byte of register IX is loaded into the low byte of register IX."),
                new Instruction(0xdd6e, "ld l,(ix+o)", "", 3, TYPE.NONE, "Load register L indirect from indexed memory location (IX + o)", "The content of the memory location addressed by the IX index register plus the given offset value is loaded into register L"),
                new Instruction(0xdd6f, "ld ixl,a", "", 2, TYPE.NONE, "Load the low byte of register IX from the accumulator", "The content of register A is loaded into the low byte of register IX."),
                new Instruction(0xdd70, "ld (ix+o),b", "", 3, TYPE.NONE, "Load indexed addressed memory location (IX + o) from register B", "The content of register B is loaded into the memory location addressed by the content of the index register plus the given offset value."),
                new Instruction(0xdd71, "ld (ix+o),c", "", 3, TYPE.NONE, "Load indexed addressed memory location (IX + o) from register C", "The content of register C is loaded into the memory location addressed by the content of the index register plus the given offset value."),
                new Instruction(0xdd72, "ld (ix+o),d", "", 3, TYPE.NONE, "Load indexed addressed memory location (IX + o) from register D", "The content of register D is loaded into the memory location addressed by the content of the index register plus the given offset value."),
                new Instruction(0xdd73, "ld (ix+o),e", "", 3, TYPE.NONE, "Load indexed addressed memory location (IX + o) from register E", "The content of register E is loaded into the memory location addressed by the content of the index register plus the given offset value."),
                new Instruction(0xdd74, "ld (ix+o),h", "", 3, TYPE.NONE, "Load indexed addressed memory location (IX + o) from register H", "The content of register H is loaded into the memory location addressed by the content of the index register plus the given offset value."),
                new Instruction(0xdd75, "ld (ix+o),l", "", 3, TYPE.NONE, "Load indexed addressed memory location (IX + o) from register L", "The content of register L is loaded into the memory location addressed by the content of the index register plus the given offset value."),
                new Instruction(0xdd76, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd77, "ld (ix+o),a", "", 3, TYPE.NONE, "Load indexed addressed memory location (IX + o) from the accumulator", "The content of register A is loaded into the memory location addressed by the content of the index register plus the given offset value."),
                new Instruction(0xdd78, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd79, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd7a, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd7b, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd7c, "ld a,ixh", "", 2, TYPE.NONE, "Load the accumulator from the high byte of register IX", "The content of the high byte of register IX is loaded into the register A."),
                new Instruction(0xdd7d, "ld a,ixl", "", 2, TYPE.NONE, "Load the accumulator from the low byte of register IX", "The content of the low byte of register IX is loaded into the register A."),
                new Instruction(0xdd7e, "ld a,(ix+o)", "", 3, TYPE.NONE, "Load accumulator indirect from indexed memory location (IX + o)", "The content of the memory location addressed by the IX index register plus the given offset value is loaded into register A"),
                new Instruction(0xdd7f, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd80, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd81, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd82, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd83, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd84, "add a,ixh", "", 2, TYPE.NONE, "Add the high byte of register IX to the accumulator", "The high byte of register IX is added to the content of the accumulator."),
                new Instruction(0xdd85, "add a,ixl", "", 2, TYPE.NONE, "Add the low byte of register IX to the accumulator", "The low byte of register IX is added to the content of the accumulator."),
                new Instruction(0xdd86, "add a,(ix+o)", "add (ix+o)", 3, TYPE.NONE, "Add the indexed addressed memory location (IX + o) to the accumulator", "The content of the memory location addressed by the content of the IX register plus the immediate offset value is added to the content of the accumulator."),
                new Instruction(0xdd87, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd88, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd89, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd8a, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd8b, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd8c, "adc a,ixh", "", 2, TYPE.NONE, "Add the high byte of register IX to accumulator with carry", "The high order byte of register IX and the carry flag from the status register are added to the accumulator."),
                new Instruction(0xdd8d, "adc a,ixl", "", 2, TYPE.NONE, "Add the low byte of register IX to accumulator with carry", "The low order byte of register IX and the carry flag from the status register are added to the accumulator."),
                new Instruction(0xdd8e, "adc a,(ix+o)", "", 3, TYPE.NONE, "Add the memory location specified by (IX + o) to accumulator with carry", "The memory location specified by (IX + offset) and the carry flag from the status register are added to the accumulator."),
                new Instruction(0xdd8f, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd90, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd91, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd92, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd93, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd94, "sub a,ixh", "", 2, TYPE.NONE, "Subtract the high byte of register IX from accumulator", "The high order byte of register IX is subtracted from the accumulator and the result is stored in the accumulator."),
                new Instruction(0xdd95, "sub a,ixl", "", 2, TYPE.NONE, "Subtract the low byte of register IX from accumulator", "The low order byte of register IX is subtracted from the accumulator and the result is stored in the accumulator."),
                new Instruction(0xdd96, "sub a,(ix+o)", "sub (ix+o)", 3, TYPE.NONE, "Subtract the memory location specified by (IX + o) from accumulator", "The memory location specified by (IX + offset) is subtracted from the accumulator and the result is stored in the accumulator."),
                new Instruction(0xdd97, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd98, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd99, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd9a, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd9b, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdd9c, "sbc a,ixh", "", 2, TYPE.NONE, "Subtract with borrow the high byte of register IX from accumulator", "The high order byte of register IX, summed with the content of the carry flag, is subtracted from the content of the accumulator, the result is placed in the accumulator."),
                new Instruction(0xdd9d, "sbx a,ixl", "", 2, TYPE.NONE, "Subtract with borrow the low byte of register IX from accumulator", "The low order byte of register IX, summed with the content of the carry flag, is subtracted from the content of the accumulator, the result is placed in the accumulator."),
                new Instruction(0xdd9e, "sbc a,(ix+o)", "", 3, TYPE.NONE, "Subtract with borrow the indirectly addressed memory location (IX + o) from accumulator", "The memory location specified by (IX + offset), summed with the content of the carry flag, is subtracted from the content of the accumulator, the result is placed in the accumulator."),
                new Instruction(0xdd9f, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdda0, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdda1, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdda2, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdda3, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdda4, "and ixh", "", 2, TYPE.NONE, "Logical AND accumulator with the high byte of register IX", "The accumulator and the high byte of register IX are logically 'AND'ed and the result is stored in the accumulator."),
                new Instruction(0xdda5, "and ixl", "", 2, TYPE.NONE, "Logical AND accumulator with the low byte of register IX", "The accumulator and the low byte of register IX are logically 'AND'ed and the result is stored in the accumulator."),
                new Instruction(0xdda6, "and (ix+o)", "", 3, TYPE.NONE, "Logical AND accumulator with the indirectly addressed memory location (IX + o)", "The accumulator and the memory location specified by (IX + offset) are logically 'AND'ed and the result is stored in the accumulator."),
                new Instruction(0xdda7, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdda8, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdda9, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddaa, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddab, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddac, "xor ixh", "", 2, TYPE.NONE, "Logical Exclusive OR accumulator with the high byte of register IX", "The accumulator and the high byte of register IX are logically 'exclusive or'ed and the result is stored in the accumulator."),
                new Instruction(0xddad, "xor ixl", "", 2, TYPE.NONE, "Logical Exclusive OR accumulator with the low byte of register IX", "The accumulator and the low byte of register IX are logically 'exclusive or'ed and the result is stored in the accumulator."),
                new Instruction(0xddae, "xor (ix+o)", "", 3, TYPE.NONE, "Logical Exclusive OR accumulator with the indirectly addressed memory location (IX + o)", "The accumulator and the memory location specified by (IX + offset) are logically 'exclusive or'ed and the result is stored in the accumulator."),
                new Instruction(0xddaf, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddb0, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddb1, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddb2, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddb3, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddb4, "or ixh", "", 2, TYPE.NONE, "Logical OR accumulator with the high byte of register IX", "The accumulator and the high byte of register IX are logically 'OR'ed and the result is stored in the accumulator."),
                new Instruction(0xddb5, "or ixl", "", 2, TYPE.NONE, "Logical OR accumulator with the low byte of register IX", "The accumulator and the low byte of register IX are logically 'OR'ed and the result is stored in the accumulator."),
                new Instruction(0xddb6, "or (ix+o)", "", 3, TYPE.NONE, "Logical OR accumulator with the indirectly addressed memory location (IX + o)", "The accumulator and the memory location specified by (IX + offset) are logically 'OR'ed and the result is stored in the accumulator."),
                new Instruction(0xddb7, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddb8, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddb9, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddba, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddbb, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddbc, "cp ixh", "", 2, TYPE.NONE, "Compare the high byte of register IX to accumulator", "The high byte of register IX is subtracted from the accumulator.\r\nThe result is discarded."),
                new Instruction(0xddbd, "cp ixl", "", 2, TYPE.NONE, "Compare the low byte of register IX to accumulator", "The low byte of register IX is subtracted from the accumulator.\r\nThe result is discarded."),
                new Instruction(0xddbe, "cp (ix+o)", "", 3, TYPE.NONE, "Compare the indirectly addressed memory location (IX + o) to accumulator", "The indirectly addressed memory location (IX + offset) is subtracted from the accumulator.\r\nThe result is discarded."),
                new Instruction(0xddbf, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddc0, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddc1, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddc2, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddc3, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddc4, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddc5, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddc6, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddc7, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddc8, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddc9, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddca, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddcb, "-", "", 0, TYPE.NONE, "-", "-"),                           // To extended IX bit instructions
                new Instruction(0xddcc, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddcd, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddce, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddcf, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddd0, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddd1, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddd2, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddd3, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddd4, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddd5, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddd6, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddd7, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddd8, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddd9, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddda, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdddb, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdddc, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdddd, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddde, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdddf, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdde0, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdde1, "pop ix", "", 2, TYPE.NONE, "POP register IX from stack", "The content of the memory location addressed by the stack pointer is loaded into the low order of the IX register and the stack pointer is incremented.\r\nThe content of the memory location now addressed by the stack pointer is loaded into the high order of the IX register and the stack pointer is again incremented."),
                new Instruction(0xdde2, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdde3, "ex (sp),ix", "", 2, TYPE.NONE, "Exchange IX with top of stack", "The content of the low order of the IX register are exchanged with the content of the memory location addressed by the stack pointer.\r\nThe content of the high order of the IX register are exchanged with the content of the memory location immediately following the one addressed by the stack pointer."),
                new Instruction(0xdde4, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdde5, "push ix", "", 2, TYPE.NONE, "Push register IX onto stack", "The stack pointer is decremented and the content of the high order of the IX register is loaded into the memory location addressed by the stack pointer.\r\nThe stack pointer is again decremented and then the content of the low order of the IX register is loaded into the memory location addressed by the stack pointer."),
                new Instruction(0xdde6, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdde7, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdde8, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdde9, "jp (ix)", "", 2, TYPE.UNCONDITIONALJUMP, "Jump to IX", "The content of the IX register is loaded into the program counter.\r\nThe next instruction is fetched from this new address."),
                new Instruction(0xddea, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddeb, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddec, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xdded, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddee, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddef, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddf0, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddf1, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddf2, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddf3, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddf4, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddf5, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddf6, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddf7, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddf8, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddf9, "ld sp,ix", "", 2, TYPE.NONE, "Load stack pointer from IX register", "The content of the IX register is loaded into the stack pointer."),
                new Instruction(0xddfa, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddfb, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddfc, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddfd, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddfe, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xddff, "-", "", 2, TYPE.NONE, "-", "-")
            };

            #endregion

            #region Instructions (Misc)

            // Misc instructions
            Z80MiscInstructions = new Instruction[]
            {
                new Instruction(0xed00, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed01, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed02, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed03, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed04, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed05, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed06, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed07, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed08, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed09, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed0a, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed0b, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed0c, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed0d, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed0e, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed0f, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed10, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed11, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed12, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed13, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed14, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed15, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed16, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed17, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed18, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed19, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed1a, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed1b, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed1c, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed1d, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed1e, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed1f, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed20, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed21, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed22, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed23, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed24, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed25, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed26, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed27, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed28, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed29, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed2a, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed2b, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed2c, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed2d, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed2e, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed2f, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed30, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed31, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed32, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed33, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed34, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed35, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed36, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed37, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed38, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed39, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed3a, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed3b, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed3c, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed3d, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed3e, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed3f, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed40, "in b,(c)", "", 2, TYPE.NONE, "Load register B from port (register C)", "The peripheral device addressed by the content of the C register is read and the result is loaded into register B.\r\n"),
                new Instruction(0xed41, "out (c),b", "", 2, TYPE.NONE, "Output register B to port C", "The content of register B is output to the peripheral device addressed by the content of the C register."),
                new Instruction(0xed42, "sbc hl,bc", "", 2, TYPE.NONE, "Subtract with borrow register pair BC from HL", "The content of the register pair BC plus the content of the carry flag are subtracted from the content of the HL register pair and the result is stored back in HL."),
                new Instruction(0xed43, "ld (nn),bc", "", 4, TYPE.NONE, "Load memory locations addressed by nn from register pair BC", "The content of the low order of the register pair BC is loaded into the memory location addressed by the memory locations immediately following the opcode.\r\nThe content of the high order of the register pair is loaded into the memory location immediately following the one loaded from the low order.\r\nThe low order of the nn address occurs immediately after the opcode."),
                new Instruction(0xed44, "neg", "", 2, TYPE.NONE, "Negate accumulator", "The content of the accumulator is subtracted from zero (two's complement) and the result is stored back in the accumulator."),
                new Instruction(0xed45, "retn", "", 2, TYPE.UNCONDITIONALRETURN, "Return from non-maskable interrupt", "The program counter is popped off the stack as described for the POP instructions.\r\nThen the contents of the IFF2 (storage flip-flop) is copied back into the IFF1 to restore the state of the interrupt flag before the non-maskable interrupt."),
                new Instruction(0xed46, "im 0", "", 2, TYPE.NONE, "Set interrupt mode 0 condition", "Sets interrupt mode 0.\r\nIn this condition, the interrupting device may insert one instruction onto the data bus for execution, the first byte of which must occur during the interrupt acknowledge cycle."),
                new Instruction(0xed47, "ld i,a", "", 2, TYPE.NONE, "Load Interrupt Vector register I from the accumulator", "The content of the accumulator is loaded into the Interrupt Vector register."),
                new Instruction(0xed48, "in c,(c)", "", 2, TYPE.NONE, "Load register C from port (register C)", "The peripheral device addressed by the content of the C register is read and the result is loaded into register C."),
                new Instruction(0xed49, "out (c),c", "", 2, TYPE.NONE, "Output register C to port C", "The content of register C is output to the peripheral device addressed by the content of the C register."),
                new Instruction(0xed4a, "adc hl,bc", "", 2, TYPE.NONE, "Add register pair BC to HL with carry", "The content of the HL register pair is added to the content of register pair BC, then the content of the carry flag are added.\r\nThe final result is stored back in HL"),
                new Instruction(0xed4b, "ld bc,(nn)", "", 4, TYPE.NONE, "Load register pair BC from memory locations addressed by nn", "The content of the memory location addressed by the memory locations immediately following the opcode is loaded into register C.\r\nThe content of the memory location immediately following the one previously loaded are then loaded into register B.\r\nThe low order byte of the nn address immediately follows the opcode."),
                new Instruction(0xed4c, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed4d, "reti", "", 2, TYPE.UNCONDITIONALRETURN, "Return from interrupt", "The program counter is popped off the stack as described for the POP instructions.\r\nThis instruction is recognized by Zilog peripheral devices as the end of a peripheral service routine so as to allow proper control of nested priority interrupts.\r\nAn EI instruction must be executed prior to RETI in order to re-enable interrupts."),
                new Instruction(0xed4e, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed4f, "ld r,a", "", 2, TYPE.NONE, "Load Memory Refresh register R from the accumulator", "The content of the accumulator is loaded into the Memory Refresh register."),
                new Instruction(0xed50, "in d,(c)", "", 2, TYPE.NONE, "Load register D from port (register C)", "The peripheral device addressed by the content of the C register is read and the result is loaded into register D."),
                new Instruction(0xed51, "out (c),d", "", 2, TYPE.NONE, "Output register D to port C", "The content of register D is output to the peripheral device addressed by the content of the C register."),
                new Instruction(0xed52, "sbc hl,de", "", 2, TYPE.NONE, "Subtract with borrow register pair DE from HL", "The content of the register pair DE plus the content of the carry flag are subtracted from the content of the HL register pair and the result is stored back in HL."),
                new Instruction(0xed53, "ld (nn),de", "", 4, TYPE.NONE, "Load memory locations addressed by nn from register pair DE", "The content of the low order of the register pair DE is loaded into the memory location addressed by the memory locations immediately following the opcode.\r\nThe content of the high order of the register pair is loaded into the memory location immediately following the one loaded from the low order.\r\nThe low order of the nn address occurs immediately after the opcode."),
                new Instruction(0xed54, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed55, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed56, "im 1", "", 2, TYPE.NONE, "Set interrupt mode 1 condition", "Sets interrupt mode 1.\r\nA RST 0038H instruction will be executed when an interrupt occurs."),
                new Instruction(0xed57, "ld a,i", "", 2, TYPE.NONE, "Load accumulator from interrupt vector register I", "The content of the interrupt vector register is loaded into the accumulator."),
                new Instruction(0xed58, "in e,(c)", "", 2, TYPE.NONE, "Load register E from port (register C)", "The peripheral device addressed by the content of the C register is read and the result is loaded into register E."),
                new Instruction(0xed59, "out (c),e", "", 2, TYPE.NONE, "Output register E to port C", "The content of register E is output to the peripheral device addressed by the content of the C register."),
                new Instruction(0xed5a, "adc hl,de", "", 2, TYPE.NONE, "Add register pair DE to HL with carry", "The content of the HL register pair is added to the content of register pair DE, then the content of the carry flag is added.\r\nThe final result is stored back in HL"),
                new Instruction(0xed5b, "ld de,(nn)", "", 4, TYPE.NONE, "Load register pair DE from memory locations addressed by nn", "The content of the memory location addressed by the memory locations immediately following the opcode is loaded into register E.\r\nThe content of the memory location immediately following the one previously loaded are then loaded into register D.\r\nThe low order byte of the nn address immediately follows the opcode."),
                new Instruction(0xed5c, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed5d, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed5e, "im 2", "", 2, TYPE.NONE, "Set interrupt mode 2 condition", "Set interrupt mode 2.\r\nWhen an interrupt occurs, one byte of data must be provided by the peripheral which is used as the low order of an address.\r\nThe high order of this vector address is taken from the content of the I register.\r\nThis points to a second address stored in memory, which is loaded into the program counter and begins execution."),
                new Instruction(0xed5f, "ld a,r", "", 2, TYPE.NONE, "Load accumulator from Memory Refresh register R", "The content of the Memory Refresh register is loaded into the accumulator."),
                new Instruction(0xed60, "in h,(c)", "", 2, TYPE.NONE, "Load register H from port (register C)", "The peripheral device addressed by the content of the C register is read and the result is loaded into register H."),
                new Instruction(0xed61, "out (c),h", "", 2, TYPE.NONE, "Output register H to port C", "The content of register H is output to the peripheral device addressed by the content of the C register."),
                new Instruction(0xed62, "sbc hl,hl", "", 2, TYPE.NONE, "Subtract with borrow register pair HL from HL", "The content of the register pair HL plus the content of the carry flag are subtracted from the content of the HL register pair and the result is stored back in HL."),
                new Instruction(0xed63, "ld (nn),hl", "", 4, TYPE.NONE, "Load memory locations addressed by nn from register pair HL", "The content of the low order of the register pair HL is loaded into the memory location addressed by the memory locations immediately following the opcode.\r\nThe content of the high order of the register pair is loaded into the memory location immediately following the one loaded from the low order.\r\nThe low order of the nn address occurs immediately after the opcode."),
                new Instruction(0xed64, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed65, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed66, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed67, "rrd", "", 2, TYPE.NONE, "Rotate right decimal", "The 4 high order bits of the memory location addressed by the contents of the HL register pair are moved to the low order 4 bits of that location.\r\nThe 4 low order bits are moved to the 4 low order bits of the accumulator.\r\nThe low order bits of the accumulator are moved to the 4 high order bit positions of the memory location originally specified.\r\nAll of the above operations occur simultaneously."),
                new Instruction(0xed68, "in l,(c)", "", 2, TYPE.NONE, "Load register L from port (register C)", "The peripheral device addressed by the content of the C register is read and the result is loaded into register L."),
                new Instruction(0xed69, "out (c),l", "", 2, TYPE.NONE, "Output register L to port C", "The content of register L is output to the peripheral device addressed by the content of the C register."),
                new Instruction(0xed6a, "adc hl,hl", "", 2, TYPE.NONE, "Add register pair HL to HL with carry", "The content of the HL register pair is added to the content of register pair HL, then the content of the carry flag is added.\r\nThe final result is stored back in HL"),
                new Instruction(0xed6b, "ld hl,(nn)", "", 4, TYPE.NONE, "Load register pair HL from memory locations addressed by nn", "The content of the memory location addressed by the memory locations immediately following the opcode is loaded into register L.\r\nThe content of the memory location immediately following the one previously loaded are then loaded into register H.\r\nThe low order byte of the nn address immediately follows the opcode."),
                new Instruction(0xed6c, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed6d, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed6e, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed6f, "rld", "", 2, TYPE.NONE, "Rotate left decimal", "The 4 low order bits of the memory location addressed by the contents of HL are moved to the high order bit positions of that same location.\r\nThe 4 high order bits are moved to the 4 low order bits of the accumulator.\r\nThe low order of the accumulator is moved to the 4 low order bits of the memory location originally specified.\r\nAll of these operations occur simultaneously."),
                new Instruction(0xed70, "in (c)", "", 2, TYPE.NONE, "Read from input port n", "The peripheral device addressed by the content of the C register is read.\r\nOnly the flags are affected."),
                new Instruction(0xed71, "out (c),0", "", 2, TYPE.NONE, "Output 0 to port C", "0 is output to the peripheral device addressed by the content of the C register."),
                new Instruction(0xed72, "sbc hl,sp", "", 2, TYPE.NONE, "Subtract with borrow the stack pointer from HL", "The content of the register SP plus the content of the carry flag are subtracted from the content of the HL register pair and the result is stored back in HL."),
                new Instruction(0xed73, "ld (nn),sp", "", 4, TYPE.NONE, "Load memory locations addressed by nn from the stack pointer", "The content of the low order of the register SP is loaded into the memory location addressed by the memory locations immediately following the opcode.\r\nThe content of the high order of the register pair is loaded into the memory location immediately following the one loaded from the low order.\r\nThe low order of the nn address occurs immediately after the opcode."),
                new Instruction(0xed74, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed75, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed76, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed77, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed78, "in a,(c)", "", 2, TYPE.NONE, "Load the accumulator from port (register C)", "The peripheral device addressed by the content of the C register is read and the result is loaded into register A."),
                new Instruction(0xed79, "out (c),a", "", 2, TYPE.NONE, "Output register A to port C", "The content of register A is output to the peripheral device addressed by the content of the C register."),
                new Instruction(0xed7a, "adc hl,sp", "", 2, TYPE.NONE, "Add the stack pointer (SP) to HL with carry", "The content of the HL register pair is added to the content of the stack pointer (SP), then the content of the carry flag is added.\r\nThe final result is stored back in HL"),
                new Instruction(0xed7b, "ld sp,(nn)", "", 4, TYPE.NONE, "Load the stack pointer (SP) from memory locations addressed by nn", "The content of the memory location addressed by the memory locations immediately following the opcode is loaded into the high order byte of register SP.\r\nThe content of the memory location immediately following the one previously loaded are then loaded into the low order byte of register SP.\r\nThe low order byte of the nn address immediately follows the opcode."),
                new Instruction(0xed7c, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed7d, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed7e, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed7f, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed80, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed81, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed82, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed83, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed84, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed85, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed86, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed87, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed88, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed89, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed8a, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed8b, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed8c, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed8d, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed8e, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed8f, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed90, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed91, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed92, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed93, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed94, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed95, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed96, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed97, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed98, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed99, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed9a, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed9b, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed9c, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed9d, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed9e, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xed9f, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xeda0, "ldi", "", 2, TYPE.NONE, "Block load with increment", "The content of the memory location addressed by HL is loaded into the memory location addressed by DE.\r\nThen both DE and HL are incremented and the register pair BC is decremented."),
                new Instruction(0xeda1, "cpi", "", 2, TYPE.NONE, "Compare with increment", "The content of the memory location addressed by the HL register pair is subtracted from the content of the accumulator and the result is discarded.\r\nThe HL register pair is incremented and the BC register pair is decremented."),
                new Instruction(0xeda2, "ini", "", 2, TYPE.NONE, "Input with increment", "The peripheral device addressed by the C register is read and the result is loaded into the memory location addressed by the HL register pair.\r\nThe B register is decremented and the HL register pair is incremented."),
                new Instruction(0xeda3, "outi", "", 2, TYPE.NONE, "Output with incremen", "The content of the memory location addressed by the HL register pair is output to the peripheral device addressed by the C register.\r\nThe B register is decremented and the HL register pair is incremented."),
                new Instruction(0xeda4, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xeda5, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xeda6, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xeda7, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xeda8, "ldd", "", 2, TYPE.NONE, "Block load with decrement", "The content of the memory location addressed by HL is loaded into the memory location addressed by DE.\r\nThen BC, DE, and I-IL are all decremented."),
                new Instruction(0xeda9, "cpd", "", 2, TYPE.NONE, "Compare with decrement", "The content of the memory location addressed by the HL register pair is subtracted from the content of the accumulator and the result is discarded.\r\nThen both the HL register pair and the BC register pair are decremented."),
                new Instruction(0xedaa, "ind", "", 2, TYPE.NONE, "Input with decrement", "The peripheral device addressed by the C register is read and the result is loaded into the memory location addressed by the HL register pair.\r\nThe B register and the HL register pair are then each decremented."),
                new Instruction(0xedab, "outd", "", 2, TYPE.NONE, "Output with decrement", "The content of the memory location addressed by the HL register pair is output to the peripheral device addressed by the content of the C register.\r\nThen both the B register and the HL register pair are decremented."),
                new Instruction(0xedac, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedad, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedae, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedaf, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedb0, "ldir", "", 2, TYPE.NONE, "Repeating block load with Increment", "The content of the memory location addressed by HL is loaded into the memory location addressed by DE.\r\nThen both DE and HL are incremented.\r\nBC is decremented.\r\nIf BC != 0 then the program counter is decremented by 2 and the instruction is re-executed."),
                new Instruction(0xedb1, "cpir", "", 2, TYPE.NONE, "Block compare with increment", "The content of the memory location addressed by the HL register pair is subtracted from the content of the accumulator and the result is discarded.\r\nThen the HL register pair is incremented and the BC register pair is decremented.\r\nIf BC != 0 and A != [HL], then the program counter is decremented by 2 and the instruction is re-executed."),
                new Instruction(0xedb2, "inir", "", 2, TYPE.NONE, "Block input with increment", "The peripheral device addressed by the C register is read and the result is loaded into the memory location addressed by the HL register pair.\r\nThe B register is decremented and the HL register pair is incremented.\r\nIf B != 0, the program counter is decremented by 2 and the instruction is re-executed."),
                new Instruction(0xedb3, "otir", "", 2, TYPE.NONE, "Block output with increment", "The content of the memory location addressed by the HL register pair is output to the peripheral device addressed by the contents of the C register.\r\nThe B register is decremented and the HL register pair is incremented.\r\nIf B != 0 the program counter\r\nis decremented by 2 and the instruction is reexecuted"),
                new Instruction(0xedb4, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedb5, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedb6, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedb7, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedb8, "lddr", "", 2, TYPE.NONE, "Repeating block load with decrement", "The content of the memory location addressed by HL is loaded into the memory location addressed by DE.\r\nThen DE, HL, and BC are all decremented.\r\nIf BC != 0, then the program counter is decremented by 2 and the instruction re-executed."),
                new Instruction(0xedb9, "cpdr", "", 2, TYPE.NONE, "Block compare with decrement", "The content of the memory location addressed by the HL register pair is subtracted from the content of the accumulator and the result is discarded.\r\nThen both the BC register pair and the HL register pair are decremented.\r\nIf BC != 0 and A != [HL], the program counter is decremented by two and the instruction is re-executed."),
                new Instruction(0xedba, "indr", "", 2, TYPE.NONE, "Block input with decrement", "The peripheral device addressed by the C register is read and the result is loaded into the memory location addressed by the HL register pair.\r\nThen the B register and the HL register pair are decremented.\r\nIf B != 0, the program counter is decremented by 2 and the instruction is re-executed."),
                new Instruction(0xedbb, "otdr", "", 2, TYPE.NONE, "Block output with decrement", "The content of the memory location addressed by the HL register pair is output to the peripheral device addressed by the content of the C register.\r\nBoth the B register and the HL register pair are then decremented.\r\nIf B != 0, the program counter is decremented by 2 and the instruction is re-executed."),
                new Instruction(0xedbc, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedbd, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedbe, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedbf, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedc0, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedc1, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedc2, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedc3, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedc4, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedc5, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedc6, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedc7, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedc8, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedc9, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedca, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedcb, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedcc, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedcd, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedce, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedcf, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedd0, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedd1, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedd2, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedd3, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedd4, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedd5, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedd6, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedd7, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedd8, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedd9, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedda, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xeddb, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xeddc, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xeddd, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedde, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xeddf, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xede0, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xede1, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xede2, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xede3, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xede4, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xede5, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xede6, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xede7, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xede8, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xede9, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedea, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedeb, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedec, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xeded, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedee, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedef, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedf0, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedf1, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedf2, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedf3, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedf4, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedf5, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedf6, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedf7, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedf8, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedf9, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedfa, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedfb, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedfc, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedfd, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedfe, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xedff, "-", "", 2, TYPE.NONE, "-", "-")
            };

            #endregion

            #region Instructions (IY)

            // IY instructions
            Z80IYInstructions = new Instruction[]
            {
                new Instruction(0xfd00, "-", "", 2, TYPE.NONE, "-", "-"),                          
                new Instruction(0xfd01, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd02, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd03, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd04, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd05, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd06, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd07, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd08, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd09, "add iy,bc", "", 2, TYPE.NONE, "Add IY to register pair BC", "The content of the IY register is added to the content of register pair BC and the result is stored back in IY."),
                new Instruction(0xfd0a, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd0b, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd0c, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd0d, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd0e, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd0f, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd10, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd11, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd12, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd13, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd14, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd15, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd16, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd17, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd18, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd19, "add iy,de", "", 2, TYPE.NONE, "Add IY to register pair DE", "The content of the IY register is added to the content of register pair DE and the result is stored back in IY."),
                new Instruction(0xfd1a, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd1b, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd1c, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd1d, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd1e, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd1f, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd20, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd21, "ld iy,nn", "", 4, TYPE.NONE, "Load register IY with immediate data nn", "The content of the two memory locations immediately following the opcode is loaded into register IY.\r\nThe lower order byte of the data occurs immediately after the opcode."),
                new Instruction(0xfd22, "ld (nn),iy", "", 4, TYPE.NONE, "Load memory locations addressed by nn from IY", "The content of the low order of the IY register is loaded into the memory location addressed by the content of the memory location immediately following the opcode.\r\nThe content of the high order of the IY register is loaded into the memory location immediately following the one loaded from the low order.\r\nThe low order of the nn address occurs immediately after the op code."),
                new Instruction(0xfd23, "inc iy", "", 2, TYPE.NONE, "Increment register IY", "The content of register IY is incremented and stored back at register IY."),
                new Instruction(0xfd24, "inc iyh", "", 2, TYPE.NONE, "Increment of high byte of register IY", "The high byte of the content of register IY is incremented and stored back at register IY."),
                new Instruction(0xfd25, "dec iyh", "", 2, TYPE.NONE, "Decrement of high byte of register IY", "The high byte of the content of register IY is decremented and stored back at register IY."),
                new Instruction(0xfd26, "ld iyh,n", "", 3, TYPE.NONE, "Load the high byte of register IY with immediate data n", "The content of the memory location immediately following the opcode location is loaded into the high byte of register IY"),
                new Instruction(0xfd27, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd28, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd29, "add iy,iy", "", 2, TYPE.NONE, "Add IY to register IY", "The content of the IY register is added to the content of register IY and the result is stored back in IY."),
                new Instruction(0xfd2a, "ld iy,(nn)", "", 4, TYPE.NONE, "Load regiter IY from memory locations addressed by nn", "The content of the memory location addressed by the memory locations immediately following the opcode is loaded into the high order byte of register IY.\r\nThe content of the memory location immediately following the one previously loaded are then loaded into the low order byte of register IY.\r\nThe low order byte of the nn address immediately follows the opcode."),
                new Instruction(0xfd2b, "dec iy", "", 2, TYPE.NONE, "Decrement register IY", "The content of register IY is decremented and stored back at register IY."),
                new Instruction(0xfd2c, "inc iyl", "", 2, TYPE.NONE, "Inrement of low byte of register IY", "The low byte of the content of register IY is incremented and stored back at register IY."),
                new Instruction(0xfd2d, "dec iyl", "", 2, TYPE.NONE, "Decrement of low byte of register IY", "The low byte of the content of register IY is decremented and stored back at register IY."),
                new Instruction(0xfd2e, "ld iyl,n", "", 3, TYPE.NONE, "Load the low byte of register IY with immediate data n", "The content of the memory location immediately following the opcode location is loaded into the low byte of register IY"),
                new Instruction(0xfd2f, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd30, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd31, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd32, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd33, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd34, "inc (iy+o)", "", 3, TYPE.NONE, "Increment indexed addressed memory location (IY + offset)", "The memory location specified by (IY + offset) is incremented."),
                new Instruction(0xfd35, "dec (iy+o)", "", 3, TYPE.NONE, "Decrement indexed addressed memory location (IY + offset)", "The memory location specified by (IY + offset) is decremented."),
                new Instruction(0xfd36, "ld (iy+o),n", "", 4, TYPE.NONE, "Load indexed addressed memory location (IY + offset) with immediate data n", "The content of the memory location immediately following the offset is transferred into the memory location addressed by the content of the index register plus the given offset value."),
                new Instruction(0xfd37, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd38, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd39, "add iy,sp", "", 2, TYPE.NONE, "Add IY to the stack pointer (SP)", "The content of the IY register is added to the content of the stack pointer (SP) and the result is stored back in IY."),
                new Instruction(0xfd3a, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd3b, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd3c, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd3d, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd3e, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd3f, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd40, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd41, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd42, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd43, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd44, "ld b,iyh", "", 2, TYPE.NONE, "Load register B from the high byte of register IY", "The content of the high byte of register IY is loaded into the register B."),
                new Instruction(0xfd45, "ld b,iyl", "", 2, TYPE.NONE, "Load register B from the low byte of register IY", "The content of the low byte of register IY is loaded into the register B."),
                new Instruction(0xfd46, "ld b,(iy+o)", "", 3, TYPE.NONE, "Load register B indirect from indexed memory location (IY + o)", "The content of the memory location addressed by the IY index register plus the given offset value is loaded into register B"),
                new Instruction(0xfd47, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd48, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd49, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd4a, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd4b, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd4c, "ld c,iyh", "", 2, TYPE.NONE, "Load register C from the high byte of register IY", "The content of the high byte of register IY is loaded into the register C."),
                new Instruction(0xfd4d, "ld c,iyl", "", 2, TYPE.NONE, "Load register C from the low byte of register IY", "The content of the low byte of register IY is loaded into the register C."),
                new Instruction(0xfd4e, "ld c,(iy+o)", "", 3, TYPE.NONE, "Load register C indirect from indexed memory location (IY + o)", "The content of the memory location addressed by the IY index register plus the given offset value is loaded into register C"),
                new Instruction(0xfd4f, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd50, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd51, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd52, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd53, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd54, "ld d,iyh", "", 2, TYPE.NONE, "Load register D from the high byte of register IY", "The content of the high byte of register IY is loaded into the register D."),
                new Instruction(0xfd55, "ld d,iyl", "", 2, TYPE.NONE, "Load register D from the low byte of register IY", "The content of the low byte of register IY is loaded into the register D."),
                new Instruction(0xfd56, "ld d,(iy+o)", "", 3, TYPE.NONE, "Load register D indirect from indexed memory location (IY + o)", "The content of the memory location addressed by the IY index register plus the given offset value is loaded into register D"),
                new Instruction(0xfd57, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd58, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd59, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd5a, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd5b, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd5c, "ld e,iyh", "", 2, TYPE.NONE, "Load register E from the high byte of register IY", "The content of the high byte of register IY is loaded into the register E."),
                new Instruction(0xfd5d, "ld e,iyl", "", 2, TYPE.NONE, "Load register E from the low byte of register IY", "The content of the low byte of register IY is loaded into the register E."),
                new Instruction(0xfd5e, "ld e,(iy+o)", "", 3, TYPE.NONE, "Load register E indirect from indexed memory location (IY + o)", "The content of the memory location addressed by the IY index register plus the given offset value is loaded into register E"),
                new Instruction(0xfd5f, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd60, "ld iyh,b", "", 2, TYPE.NONE, "Load the high byte of register IY from register B", "The content of register B is loaded into the high byte of register IY."),
                new Instruction(0xfd61, "ld iyh,c", "", 2, TYPE.NONE, "Load the high byte of register IY from register C", "The content of register C is loaded into the high byte of register IY."),
                new Instruction(0xfd62, "ld iyh,d", "", 2, TYPE.NONE, "Load the high byte of register IY from register D", "The content of register D is loaded into the high byte of register IY."),
                new Instruction(0xfd63, "ld iyh,e", "", 2, TYPE.NONE, "Load the high byte of register IY from register E", "The content of register E is loaded into the high byte of register IY."),
                new Instruction(0xfd64, "ld iyh,iyh", "", 2, TYPE.NONE, "Load the high byte of register IY from the high byte of register IY", "The content of the high byte of register IY is loaded into the high byte of register IY."),
                new Instruction(0xfd65, "ld iyh,iyl", "", 2, TYPE.NONE, "Load the high byte of register IY from the low byte of register IY", "The content of the low byte of register IY is loaded into the high byte of register IY."),
                new Instruction(0xfd66, "ld h,(iy+o)", "", 3, TYPE.NONE, "Load register H indirect from indexed memory location (IY + o)", "The content of the memory location addressed by the IY index register plus the given offset value is loaded into register H"),
                new Instruction(0xfd67, "ld iyh,a", "", 2, TYPE.NONE, "Load the high byte of register IY from the accumulator", "The content of register A is loaded into the high byte of register IY."),
                new Instruction(0xfd68, "ld iyl,b", "", 2, TYPE.NONE, "Load the low byte of register IY from register B", "The content of register B is loaded into the low byte of register IY."),
                new Instruction(0xfd69, "ld iyl,c", "", 2, TYPE.NONE, "Load the low byte of register IY from register C", "The content of register C is loaded into the low byte of register IY."),
                new Instruction(0xfd6a, "ld iyl,d", "", 2, TYPE.NONE, "Load the low byte of register IY from register D", "The content of register D is loaded into the low byte of register IY."),
                new Instruction(0xfd6b, "ld iyl,e", "", 2, TYPE.NONE, "Load the low byte of register IY from register E", "The content of register E is loaded into the low byte of register IY."),
                new Instruction(0xfd6c, "ld iyl,iyh", "", 2, TYPE.NONE, "Load the low byte of register IY from the high byte of register IY", "The content of the high byte of register IY is loaded into the low byte of register IY."),
                new Instruction(0xfd6d, "ld iyl,iyl", "", 2, TYPE.NONE, "Load the low byte of register IY from the low byte of register IY", "The content of the low byte of register IY is loaded into the low byte of register IY."),
                new Instruction(0xfd6e, "ld l,(iy+o)", "", 3, TYPE.NONE, "Load register L indirect from indexed memory location (IY + o)", "The content of the memory location addressed by the IY index register plus the given offset value is loaded into register L"),
                new Instruction(0xfd6f, "ld iyl,a", "", 2, TYPE.NONE, "Load the low byte of register IY from the accumulator", "The content of register A is loaded into the low byte of register IY."),
                new Instruction(0xfd70, "ld (iy+o),b", "", 3, TYPE.NONE, "Load indexed addressed memory location (IY + o) from register B", "The content of register B is loaded into the memory location addressed by the content of the index register plus the given offset value."),
                new Instruction(0xfd71, "ld (iy+o),c", "", 3, TYPE.NONE, "Load indexed addressed memory location (IY + o) from register C", "The content of register C is loaded into the memory location addressed by the content of the index register plus the given offset value."),
                new Instruction(0xfd72, "ld (iy+o),d", "", 3, TYPE.NONE, "Load indexed addressed memory location (IY + o) from register D", "The content of register D is loaded into the memory location addressed by the content of the index register plus the given offset value."),
                new Instruction(0xfd73, "ld (iy+o),e", "", 3, TYPE.NONE, "Load indexed addressed memory location (IY + o) from register E", "The content of register E is loaded into the memory location addressed by the content of the index register plus the given offset value."),
                new Instruction(0xfd74, "ld (iy+o),h", "", 3, TYPE.NONE, "Load indexed addressed memory location (IY + o) from register H", "The content of register H is loaded into the memory location addressed by the content of the index register plus the given offset value."),
                new Instruction(0xfd75, "ld (iy+o),l", "", 3, TYPE.NONE, "Load indexed addressed memory location (IY + o) from register L", "The content of register L is loaded into the memory location addressed by the content of the index register plus the given offset value."),
                new Instruction(0xfd76, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd77, "ld (iy+o),a", "", 3, TYPE.NONE, "Load indexed addressed memory location (IY + o) from the accumulator", "The content of register A is loaded into the memory location addressed by the content of the index register plus the given offset value."),
                new Instruction(0xfd78, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd79, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd7a, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd7b, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd7c, "ld a,iyh", "", 2, TYPE.NONE, "Load the accumulator from the high byte of register IY", "The content of the high byte of register IY is loaded into the register A."),
                new Instruction(0xfd7d, "ld a,iyl", "", 2, TYPE.NONE, "Load the accumulator from the low byte of register IY", "The content of the low byte of register IY is loaded into the register A."),
                new Instruction(0xfd7e, "ld a,(iy+o)", "", 3, TYPE.NONE, "Load the accumulator indirect from indexed memory location (IY + o)", "The content of the memory location addressed by the IY index register plus the given offset value is loaded into register A"),
                new Instruction(0xfd7f, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd80, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd81, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd82, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd83, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd84, "add a,iyh", "", 2, TYPE.NONE, "Add the high byte of register IY to the accumulator", "The high byte of register IY is added to the content of the accumulator."),
                new Instruction(0xfd85, "add a,iyl", "", 2, TYPE.NONE, "Add the low byte of register IY to the accumulator", "The low byte of register IY is added to the content of the accumulator."),
                new Instruction(0xfd86, "add a,(iy+o)", "add (iy+o)", 3, TYPE.NONE, "Add the indexed addressed memory location (IY + o) to the accumulator", "The content of the memory location addressed by the content of the IY register plus the immediate offset value is added to the content of the accumulator."),
                new Instruction(0xfd87, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd88, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd89, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd8a, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd8b, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd8c, "adc a,iyh", "", 2, TYPE.NONE, "Add the high byte of register IY to accumulator with carry", "The high order byte of register IY and the carry flag from the status register are added to the accumulator."),
                new Instruction(0xfd8d, "adc a,iyl", "", 2, TYPE.NONE, "Add the low byte of register IY to accumulator with carry", "The low order byte of register IY and the carry flag from the status register are added to the accumulator."),
                new Instruction(0xfd8e, "adc a,(iy+o)", "", 3, TYPE.NONE, "Add the memory location specified by (IY + o) to accumulator with carry", "The memory location specified by (IY + offset) and the carry flag from the status register are added to the accumulator."),
                new Instruction(0xfd8f, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd90, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd91, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd92, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd93, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd94, "sub a,iyh", "", 2, TYPE.NONE, "Subtract the high byte of register IY from accumulator", "The high order byte of register IY is subtracted from the accumulator and the result is stored in the accumulator."),
                new Instruction(0xfd95, "sub a,iyl", "", 2, TYPE.NONE, "Subtract the low byte of register IY from accumulator", "The low order byte of register IY is subtracted from the accumulator and the result is stored in the accumulator."),
                new Instruction(0xfd96, "sub a,(iy+o)", "sub (iy+o)", 3, TYPE.NONE, "Subtract the memory location specified by (IY + o) from accumulator", "The memory location specified by (IY + offset) is subtracted from the accumulator and the result is stored in the accumulator."),
                new Instruction(0xfd97, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd98, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd99, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd9a, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd9b, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfd9c, "sbc a,iyh", "", 2, TYPE.NONE, "Subtract with borrow the high byte of register IY from accumulator", "The high order byte of register IY, summed with the content of the carry flag, is subtracted from the content of the accumulator, the result is placed in the accumulator."),
                new Instruction(0xfd9d, "sbx a,iyl", "", 2, TYPE.NONE, "Subtract with borrow the low byte of register IY from accumulator", "The low order byte of register IY, summed with the content of the carry flag, is subtracted from the content of the accumulator, the result is placed in the accumulator."),
                new Instruction(0xfd9e, "sbc a,(iy+o)", "", 3, TYPE.NONE, "Subtract with borrow accumulator and the indirectly addressed memory location (IY + o)", "The memory location specified by (IY + offset), summed with the content of the carry flag, is subtracted from the content of the accumulator, the result is placed in the accumulator."),
                new Instruction(0xfd9f, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfda0, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfda1, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfda2, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfda3, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfda4, "and iyh", "", 2, TYPE.NONE, "Logical AND accumulator with the high byte of register IY", "The accumulator and the high byte of register IY are logically 'AND'ed and the result is stored in the accumulator."),
                new Instruction(0xfda5, "and iyl", "", 2, TYPE.NONE, "Logical AND accumulator with the low byte of register IY", "The accumulator and the low byte of register IY are logically 'AND'ed and the result is stored in the accumulator."),
                new Instruction(0xfda6, "and (iy+o)", "", 3, TYPE.NONE, "Logical AND accumulator with the indirectly addressed memory location (IY + offset)", "The accumulator and the memory location specified by (IY + offset) are logically 'AND'ed and the result is stored in the accumulator."),
                new Instruction(0xfda7, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfda8, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfda9, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdaa, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdab, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdac, "xor iyh", "", 2, TYPE.NONE, "Logical Exclusive OR accumulator with the high byte of register IY", "The accumulator and the high byte of register IY are logically 'exclusive or'ed and the result is stored in the accumulator."),
                new Instruction(0xfdad, "xor iyl", "", 2, TYPE.NONE, "Logical Exclusive OR accumulator with the low byte of register IY", "The accumulator and the low byte of register IY are logically 'exclusive or'ed and the result is stored in the accumulator."),
                new Instruction(0xfdae, "xor (iy+o)", "", 3, TYPE.NONE, "Logical Exclusive OR accumulator with the indirectly addressed memory location (IY + offset)", "The accumulator and the memory location specified by (IY + offset) are logically 'exclusive or'ed and the result is stored in the accumulator."),
                new Instruction(0xfdaf, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdb0, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdb1, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdb2, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdb3, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdb4, "or iyh", "", 2, TYPE.NONE, "Logical OR accumulator with the high byte of register IY", "The accumulator and the high byte of register IY are logically 'OR'ed and the result is stored in the accumulator."),
                new Instruction(0xfdb5, "or iyl", "", 2, TYPE.NONE, "Logical OR accumulator with the low byte of register IY", "The accumulator and the low byte of register IY are logically 'OR'ed and the result is stored in the accumulator."),
                new Instruction(0xfdb6, "or (iy+o)", "", 3, TYPE.NONE, "Logical OR accumulator with the indirectly addressed memory location (IY + offset)", "The accumulator and the memory location specified by (IY + offset) are logically 'OR'ed and the result is stored in the accumulator."),
                new Instruction(0xfdb7, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdb8, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdb9, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdba, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdbb, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdbc, "cp iyh", "", 2, TYPE.NONE, "Compare the high byte of register IY to accumulator", "The high byte of register IY is subtracted from the accumulator.\r\nThe result is discarded."),
                new Instruction(0xfdbd, "cp iyl", "", 2, TYPE.NONE, "Compare the low byte of register IY to accumulator", "The low byte of register IY is subtracted from the accumulator.\r\nThe result is discarded."),
                new Instruction(0xfdbe, "cp (iy+o)", "", 3, TYPE.NONE, "Compare the indirectly addressed memory location (IY + offset) to accumulator", "The indirectly addressed memory location (IY + offset) is subtracted from the accumulator.\r\nThe result is discarded."),
                new Instruction(0xfdbf, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdc0, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdc1, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdc2, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdc3, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdc4, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdc5, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdc6, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdc7, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdc8, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdc9, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdca, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdcb, "-", "", 0, TYPE.NONE, "-", "-"),                           // To extended IY bit instructions
                new Instruction(0xfdcc, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdcd, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdce, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdcf, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdd0, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdd1, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdd2, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdd3, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdd4, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdd5, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdd6, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdd7, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdd8, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdd9, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdda, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfddb, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfddc, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfddd, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdde, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfddf, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfde0, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfde1, "pop iy", "", 2, TYPE.NONE, "POP register IY from stack", "The content of the memory location addressed by the stack pointer is loaded into the low order of the IY register and the stack pointer is incremented.\r\nThe content of the memory location now addressed by the stack pointer is loaded into the high order of the IY register and the stack pointer is again incremented."),
                new Instruction(0xfde2, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfde3, "ex (sp),iy", "", 2, TYPE.NONE, "Exchange IY with top of stack", "The content of the low order of the IY register is exchanged with the content of the memory location addressed by the stack pointer.\r\nThe content of the high order of the IY register are exchanged with the content of the memory location immediately following the one addressed by the stack pointer."),
                new Instruction(0xfde4, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfde5, "push iy", "", 2, TYPE.NONE, "Push register IY onto stack", "The stack pointer is decremented and the content of the high order of the IY register is loaded into the memory location addressed by the stack pointer.\r\nThe stack pointer is again decremented and then the content of the low order of the IY register is loaded into the memory location addressed by the stack pointer."),
                new Instruction(0xfde6, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfde7, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfde8, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfde9, "jp (iy)", "", 2, TYPE.NONE, "Jump to IY", "The content of the IY register is loaded into the program counter.\r\nThe next instruction is fetched from this new address."),
                new Instruction(0xfdea, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdeb, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdec, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfded, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdee, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdef, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdf0, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdf1, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdf2, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdf3, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdf4, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdf5, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdf6, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdf7, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdf8, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdf9, "ld sp,iy", "", 2, TYPE.NONE, "Load stack pointer from IY register", "The content of the IY register is loaded into the stack pointer."),
                new Instruction(0xfdfa, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdfb, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdfc, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdfd, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdfe, "-", "", 2, TYPE.NONE, "-", "-"),
                new Instruction(0xfdff, "-", "", 2, TYPE.NONE, "-", "-")
            };

            #endregion

            #region Instructions (IX Bit)

            /// Z80 instructions (IX Bit)
            Z80IXBitInstructions = new Instruction[]
            {
                new Instruction(0x00, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x01, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x02, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x03, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x04, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x05, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x06, "rlc (ix+o)", "", 4, TYPE.NONE, "Rotate left with branch carry memory location (IX + o)", "The content of the memory location addressed by the content of the IX register plus the given offset value is rotated left and the result is stored back at that location.\r\nThe content of bit 7 is moved into the carry flag as well as into bit 0."),
                new Instruction(0x07, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x08, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x09, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x0a, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x0b, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x0c, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x0d, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x0e, "rrc (ix+o)", "", 4, TYPE.NONE, "Rotate right with branch carry memory location (IX + o)", "The content of the memory location addressed by the content of the IX register plus the given offset value is rotated right and the result is stored back at that location.\r\nThe content of bit 0 is moved into the carry flag as well as into bit 7."),
                new Instruction(0x0f, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x10, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x11, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x12, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x13, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x14, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x15, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x16, "rl (ix+o)", "", 4, TYPE.NONE, "Rotate left through carry memory location (IX + o)", "The content of the memory location addressed by the content of the IX register plus the given offset value is shifted left one bit place.\r\nThe content of the carry flag is moved into bit 0 and the content of bit 7 is moved into the carry flag."),
                new Instruction(0x17, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x18, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x19, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x1a, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x1b, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x1c, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x1d, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x1e, "rr (ix+o)", "", 4, TYPE.NONE, "Rotate right through carry memory location (IX + o)", "The content of the memory location addressed by the content of the IX register plus the given offset value is shifted right one bit place.\r\nThe content of the carry flag is moved into bit 7 and the content of bit 0 is moved into the carry flag."),
                new Instruction(0x1f, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x20, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x21, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x22, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x23, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x24, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x25, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x26, "sla (ix+o)", "", 4, TYPE.NONE, "Arithmetic shift left of memory location (IX + o)", "The content of the memory location addressed by the content of the IX register plus the given offset value is arithmetically shifted left with the content of bit 7 being moved into the carry flag and a 0 being forced into bit 0."),
                new Instruction(0x27, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x28, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x29, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x2a, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x2b, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x2c, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x2d, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x2e, "sra (ix+o)", "", 4, TYPE.NONE, "Arithmetic shift right of memory location (IX + o)", "The content of the memory location addressed by the content of the IX register plus the given offset value is arithmetically shifted right with the content of bit 0 being moved into the carry flag and a 0 being forced into bit 7."),
                new Instruction(0x2f, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x30, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x31, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x32, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x33, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x34, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x35, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x36, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x37, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x38, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x39, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x3a, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x3b, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x3c, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x3d, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x3e, "srl (ix+o)", "", 4, TYPE.NONE, "Logical shift right of memory location (IX + o)", "The content of the memory location addressed by the content of the IX register plus the given offset value is logically shifted right.\r\nA zero is moved into bit 7 and the content of bit 0 is moved into the carry flag."),
                new Instruction(0x3f, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x40, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x41, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x42, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x43, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x44, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x45, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x46, "bit 0,(ix+o)", "", 4, TYPE.NONE, "Test bit 0 of indexed addressed memory location (IX + o)", "Bit 0 of the memory location addressed by the content of the IX register plus the given offset value is tested and the Z flag is set accordingly."),
                new Instruction(0x47, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x48, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x49, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x4a, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x4b, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x4c, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x4d, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x4e, "bit 1,(ix+o)", "", 4, TYPE.NONE, "Test bit 1 of indexed addressed memory location (IX + o)", "Bit 1 of the memory location addressed by the content of the IX register plus the given offset value is tested and the Z flag is set accordingly."),
                new Instruction(0x4f, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x50, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x51, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x52, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x53, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x54, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x55, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x56, "bit 2,(ix+o)", "", 4, TYPE.NONE, "Test bit 2 of indexed addressed memory location (IX + o)", "Bit 2 of the memory location addressed by the content of the IX register plus the given offset value is tested and the Z flag is set accordingly."),
                new Instruction(0x57, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x58, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x59, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x5a, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x5b, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x5c, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x5d, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x5e, "bit 3,(ix+o)", "", 4, TYPE.NONE, "Test bit 3 of indexed addressed memory location (IX + o)", "Bit 3 of the memory location addressed by the content of the IX register plus the given offset value is tested and the Z flag is set accordingly."),
                new Instruction(0x5f, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x60, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x61, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x62, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x63, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x64, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x65, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x66, "bit 4,(ix+o)", "", 4, TYPE.NONE, "Test bit 4 of indexed addressed memory location (IX + o)", "Bit 4 of the memory location addressed by the content of the IX register plus the given offset value is tested and the Z flag is set accordingly."),
                new Instruction(0x67, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x68, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x69, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x6a, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x6b, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x6c, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x6d, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x6e, "bit 5,(ix+o)", "", 4, TYPE.NONE, "Test bit 5 of indexed addressed memory location (IX + o)", "Bit 5 of the memory location addressed by the content of the IX register plus the given offset value is tested and the Z flag is set accordingly."),
                new Instruction(0x6f, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x70, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x71, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x72, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x73, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x74, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x75, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x76, "bit 6,(ix+o)", "", 4, TYPE.NONE, "Test bit 6 of indexed addressed memory location (IX + o)", "Bit 6 of the memory location addressed by the content of the IX register plus the given offset value is tested and the Z flag is set accordingly."),
                new Instruction(0x77, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x78, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x79, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x7a, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x7b, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x7c, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x7d, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x7e, "bit 7,(ix+o)", "", 4, TYPE.NONE, "Test bit 7 of indexed addressed memory location (IX + o)", "Bit 7 of the memory location addressed by the content of the IX register plus the given offset value is tested and the Z flag is set accordingly."),
                new Instruction(0x7f, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x80, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x81, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x82, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x83, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x84, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x85, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x86, "res 0,(ix+o)", "", 4, TYPE.NONE, "Reset bit 0 of of indexed addressed memory location (IX + o)", "Bit 0 of the memory location addressed by the content of the IX register plus the given offset value is reset."),
                new Instruction(0x87, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x88, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x89, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x8a, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x8b, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x8c, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x8d, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x8e, "res 1,(ix+o)", "", 4, TYPE.NONE, "Reset bit 1 of of indexed addressed memory location (IX + o)", "Bit 1 of the memory location addressed by the content of the IX register plus the given offset value is reset."),
                new Instruction(0x8f, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x90, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x91, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x92, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x93, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x94, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x95, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x96, "res 2,(ix+o)", "", 4, TYPE.NONE, "Reset bit 2 of of indexed addressed memory location (IX + o)", "Bit 2 of the memory location addressed by the content of the IX register plus the given offset value is reset."),
                new Instruction(0x97, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x98, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x99, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x9a, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x9b, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x9c, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x9d, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x9e, "res 3,(ix+o)", "", 4, TYPE.NONE, "Reset bit 3 of of indexed addressed memory location (IX + o)", "Bit 3 of the memory location addressed by the content of the IX register plus the given offset value is reset."),
                new Instruction(0x9f, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xa0, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xa1, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xa2, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xa3, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xa4, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xa5, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xa6, "res 4,(ix+o)", "", 4, TYPE.NONE, "Reset bit 4 of of indexed addressed memory location (IX + o)", "Bit 4 of the memory location addressed by the content of the IX register plus the given offset value is reset."),
                new Instruction(0xa7, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xa8, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xa9, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xaa, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xab, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xac, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xad, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xae, "res 5,(ix+o)", "", 4, TYPE.NONE, "Reset bit 5 of of indexed addressed memory location (IX + o)", "Bit 5 of the memory location addressed by the content of the IX register plus the given offset value is reset."),
                new Instruction(0xaf, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xb0, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xb1, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xb2, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xb3, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xb4, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xb5, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xb6, "res 6,(ix+o)", "", 4, TYPE.NONE, "Reset bit 6 of of indexed addressed memory location (IX + o)", "Bit 6 of the memory location addressed by the content of the IX register plus the given offset value is reset."),
                new Instruction(0xb7, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xb8, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xb9, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xba, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xbb, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xbc, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xbd, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xbe, "res 7,(ix+o)", "", 4, TYPE.NONE, "Reset bit 7 of of indexed addressed memory location (IX + o)", "Bit 7 of the memory location addressed by the content of the IX register plus the given offset value is reset."),
                new Instruction(0xbf, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xc0, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xc1, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xc2, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xc3, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xc4, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xc5, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xc6, "set 0,(ix+o)", "", 4, TYPE.NONE, "Set bit 0 of of indexed addressed memory location (IX + o)", "Bit 0 of the memory location addressed by the content of the IX register plus the given offset value is set."),
                new Instruction(0xc7, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xc8, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xc9, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xca, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xcb, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xcc, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xcd, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xce, "set 1,(ix+o)", "", 4, TYPE.NONE, "Set bit 1 of of indexed addressed memory location (IX + o)", "Bit 1 of the memory location addressed by the content of the IX register plus the given offset value is set."),
                new Instruction(0xcf, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xd0, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xd1, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xd2, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xd3, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xd4, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xd5, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xd6, "set 2,(ix+o)", "", 4, TYPE.NONE, "Set bit 2 of of indexed addressed memory location (IX + o)", "Bit 2 of the memory location addressed by the content of the IX register plus the given offset value is set."),
                new Instruction(0xd7, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xd8, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xd9, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xda, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xdb, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xdc, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xdd, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xde, "set 3,(ix+o)", "", 4, TYPE.NONE, "Set bit 3 of of indexed addressed memory location (IX + o)", "Bit 3 of the memory location addressed by the content of the IX register plus the given offset value is set."),
                new Instruction(0xdf, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xe0, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xe1, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xe2, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xe3, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xe4, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xe5, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xe6, "set 4,(ix+o)", "", 4, TYPE.NONE, "Set bit 4 of of indexed addressed memory location (IX + o)", "Bit 4 of the memory location addressed by the content of the IX register plus the given offset value is set."),
                new Instruction(0xe7, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xe8, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xe9, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xea, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xeb, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xec, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xed, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xee, "set 5,(ix+o)", "", 4, TYPE.NONE, "Set bit 5 of of indexed addressed memory location (IX + o)", "Bit 5 of the memory location addressed by the content of the IX register plus the given offset value is set."),
                new Instruction(0xef, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xf0, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xf1, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xf2, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xf3, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xf4, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xf5, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xf6, "set 6,(ix+o)", "", 4, TYPE.NONE, "Set bit 6 of of indexed addressed memory location (IX + o)", "Bit 6 of the memory location addressed by the content of the IX register plus the given offset value is set."),
                new Instruction(0xf7, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xf8, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xf9, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xfa, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xfb, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xfc, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xfd, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xfe, "set 7,(ix+o)", "", 4, TYPE.NONE, "Set bit 7 of of indexed addressed memory location (IX + o)", "Bit 7 of the memory location addressed by the content of the IX register plus the given offset value is set."),
                new Instruction(0xff, "-", "", 4, TYPE.NONE, "-", "-")
            };

            #endregion

            #region Instructions (IY Bit)

            /// Z80 instructions (IY Bit)
            Z80IYBitInstructions = new Instruction[]
            {
                new Instruction(0x00, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x01, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x02, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x03, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x04, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x05, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x06, "rlc (iy+o)", "", 4, TYPE.NONE, "Rotate left with branch carry memory location (IY + o)", "The content of the memory location addressed by the content of the IX register plus the given offset value is rotated left and the result is stored back at that location.\r\nThe content of bit 7 is moved into the carry flag as well as into bit 0."),
                new Instruction(0x07, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x08, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x09, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x0a, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x0b, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x0c, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x0d, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x0e, "rrc (iy+o)", "", 4, TYPE.NONE, "Rotate right with branch carry memory location (IY + o)", "The content of the memory location addressed by the content of the IX register plus the given offset value is rotated right and the result is stored back at that location.\r\nThe content of bit 0 is moved into the carry flag as well as into bit 7."),
                new Instruction(0x0f, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x10, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x11, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x12, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x13, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x14, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x15, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x16, "rl (iy+o)", "", 4, TYPE.NONE, "Rotate left through carry memory location (IY + o)", "The content of the memory location addressed by the content of the IX register plus the given offset value is shifted left one bit place.\r\nThe content of the carry flag is moved into bit 0 and the content of bit 7 is moved into the carry flag."),
                new Instruction(0x17, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x18, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x19, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x1a, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x1b, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x1c, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x1d, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x1e, "rr (iy+o)", "", 4, TYPE.NONE, "Rotate right through carry memory location (IY + o)", "The content of the memory location addressed by the content of the IX register plus the given offset value is shifted right one bit place.\r\nThe content of the carry flag is moved into bit 7 and the content of bit 0 is moved into the carry flag."),
                new Instruction(0x1f, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x20, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x21, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x22, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x23, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x24, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x25, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x26, "sla (iy+o)", "", 4, TYPE.NONE, "Arithmetic shift left of memory location (IY + o)", "The content of the memory location addressed by the content of the IX register plus the given offset value is arithmetically shifted left with the content of bit 7 being moved into the carry flag and a 0 being forced into bit 0."),
                new Instruction(0x27, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x28, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x29, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x2a, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x2b, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x2c, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x2d, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x2e, "sra (iy+o)", "", 4, TYPE.NONE, "Arithmetic shift right of memory location (IY + o)", "The content of the memory location addressed by the content of the IX register plus the given offset value is arithmetically shifted right with the content of bit 0 being moved into the carry flag and a 0 being forced into bit 7."),
                new Instruction(0x2f, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x30, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x31, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x32, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x33, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x34, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x35, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x36, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x37, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x38, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x39, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x3a, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x3b, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x3c, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x3d, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x3e, "srl (iy+o)", "", 4, TYPE.NONE, "Logical shift right of memory location (IY + o)", "The content of the memory location addressed by the content of the IX register plus the given offset value is logically shifted right.\r\nA zero is moved into bit 7 and the content of bit 0 is moved into the carry flag."),
                new Instruction(0x3f, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x40, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x41, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x42, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x43, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x44, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x45, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x46, "bit 0,(iy+o)", "", 4, TYPE.NONE, "Test bit 0 of indexed addressed memory location (IY + o)", "Bit 0 of the memory location addressed by the content of the IX register plus the given offset value is tested and the Z flag is set accordingly."),
                new Instruction(0x47, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x48, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x49, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x4a, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x4b, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x4c, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x4d, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x4e, "bit 1,(iy+o)", "", 4, TYPE.NONE, "Test bit 1 of indexed addressed memory location (IY + o)", "Bit 1 of the memory location addressed by the content of the IX register plus the given offset value is tested and the Z flag is set accordingly."),
                new Instruction(0x4f, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x50, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x51, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x52, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x53, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x54, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x55, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x56, "bit 2,(iy+o)", "", 4, TYPE.NONE, "Test bit 2 of indexed addressed memory location (IY + o)", "Bit 2 of the memory location addressed by the content of the IX register plus the given offset value is tested and the Z flag is set accordingly."),
                new Instruction(0x57, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x58, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x59, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x5a, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x5b, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x5c, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x5d, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x5e, "bit 3,(iy+o)", "", 4, TYPE.NONE, "Test bit 3 of indexed addressed memory location (IY + o)", "Bit 3 of the memory location addressed by the content of the IX register plus the given offset value is tested and the Z flag is set accordingly."),
                new Instruction(0x5f, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x60, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x61, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x62, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x63, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x64, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x65, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x66, "bit 4,(iy+o)", "", 4, TYPE.NONE, "Test bit 4 of indexed addressed memory location (IY + o)", "Bit 4 of the memory location addressed by the content of the IX register plus the given offset value is tested and the Z flag is set accordingly."),
                new Instruction(0x67, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x68, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x69, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x6a, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x6b, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x6c, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x6d, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x6e, "bit 5,(iy+o)", "", 4, TYPE.NONE, "Test bit 5 of indexed addressed memory location (IY + o)", "Bit 5 of the memory location addressed by the content of the IX register plus the given offset value is tested and the Z flag is set accordingly."),
                new Instruction(0x6f, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x70, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x71, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x72, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x73, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x74, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x75, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x76, "bit 6,(iy+o)", "", 4, TYPE.NONE, "Test bit 6 of indexed addressed memory location (IY + o)", "Bit 6 of the memory location addressed by the content of the IX register plus the given offset value is tested and the Z flag is set accordingly."),
                new Instruction(0x77, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x78, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x79, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x7a, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x7b, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x7c, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x7d, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x7e, "bit 7,(iy+o)", "", 4, TYPE.NONE, "Test bit 7 of indexed addressed memory location (IY + o)", "Bit 7 of the memory location addressed by the content of the IX register plus the given offset value is tested and the Z flag is set accordingly."),
                new Instruction(0x7f, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x80, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x81, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x82, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x83, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x84, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x85, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x86, "res 0,(iy+o)", "", 4, TYPE.NONE, "Reset bit 0 of of indexed addressed memory location (IY + o)", "Bit 0 of the memory location addressed by the content of the IX register plus the given offset value is reset."),
                new Instruction(0x87, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x88, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x89, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x8a, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x8b, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x8c, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x8d, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x8e, "res 1,(iy+o)", "", 4, TYPE.NONE, "Reset bit 1 of of indexed addressed memory location (IY + o)", "Bit 1 of the memory location addressed by the content of the IX register plus the given offset value is reset."),
                new Instruction(0x8f, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x90, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x91, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x92, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x93, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x94, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x95, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x96, "res 2,(iy+o)", "", 4, TYPE.NONE, "Reset bit 2 of of indexed addressed memory location (IY + o)", "Bit 2 of the memory location addressed by the content of the IX register plus the given offset value is reset."),
                new Instruction(0x97, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x98, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x99, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x9a, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x9b, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x9c, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x9d, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0x9e, "res 3,(iy+o)", "", 4, TYPE.NONE, "Reset bit 3 of of indexed addressed memory location (IY + o)", "Bit 3 of the memory location addressed by the content of the IX register plus the given offset value is reset."),
                new Instruction(0x9f, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xa0, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xa1, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xa2, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xa3, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xa4, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xa5, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xa6, "res 4,(iy+o)", "", 4, TYPE.NONE, "Reset bit 4 of of indexed addressed memory location (IY + o)", "Bit 4 of the memory location addressed by the content of the IX register plus the given offset value is reset."),
                new Instruction(0xa7, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xa8, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xa9, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xaa, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xab, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xac, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xad, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xae, "res 5,(iy+o)", "", 4, TYPE.NONE, "Reset bit 5 of of indexed addressed memory location (IY + o)", "Bit 5 of the memory location addressed by the content of the IX register plus the given offset value is reset."),
                new Instruction(0xaf, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xb0, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xb1, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xb2, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xb3, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xb4, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xb5, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xb6, "res 6,(iy+o)", "", 4, TYPE.NONE, "Reset bit 6 of of indexed addressed memory location (IY + o)", "Bit 6 of the memory location addressed by the content of the IX register plus the given offset value is reset."),
                new Instruction(0xb7, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xb8, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xb9, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xba, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xbb, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xbc, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xbd, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xbe, "res 7,(iy+o)", "", 4, TYPE.NONE, "Reset bit 7 of of indexed addressed memory location (IY + o)", "Bit 7 of the memory location addressed by the content of the IX register plus the given offset value is reset."),
                new Instruction(0xbf, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xc0, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xc1, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xc2, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xc3, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xc4, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xc5, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xc6, "set 0,(iy+o)", "", 4, TYPE.NONE, "Set bit 0 of of indexed addressed memory location (IY + o)", "Bit 0 of the memory location addressed by the content of the IX register plus the given offset value is set."),
                new Instruction(0xc7, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xc8, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xc9, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xca, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xcb, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xcc, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xcd, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xce, "set 1,(iy+o)", "", 4, TYPE.NONE, "Set bit 1 of of indexed addressed memory location (IY + o)", "Bit 1 of the memory location addressed by the content of the IX register plus the given offset value is set."),
                new Instruction(0xcf, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xd0, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xd1, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xd2, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xd3, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xd4, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xd5, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xd6, "set 2,(iy+o)", "", 4, TYPE.NONE, "Set bit 2 of of indexed addressed memory location (IY + o)", "Bit 2 of the memory location addressed by the content of the IX register plus the given offset value is set."),
                new Instruction(0xd7, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xd8, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xd9, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xda, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xdb, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xdc, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xdd, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xde, "set 3,(iy+o)", "", 4, TYPE.NONE, "Set bit 3 of of indexed addressed memory location (IY + o)", "Bit 3 of the memory location addressed by the content of the IX register plus the given offset value is set."),
                new Instruction(0xdf, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xe0, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xe1, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xe2, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xe3, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xe4, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xe5, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xe6, "set 4,(iy+o)", "", 4, TYPE.NONE, "Set bit 4 of of indexed addressed memory location (IY + o)", "Bit 4 of the memory location addressed by the content of the IX register plus the given offset value is set."),
                new Instruction(0xe7, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xe8, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xe9, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xea, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xeb, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xec, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xed, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xee, "set 5,(iy+o)", "", 4, TYPE.NONE, "Set bit 5 of of indexed addressed memory location (IY + o)", "Bit 5 of the memory location addressed by the content of the IX register plus the given offset value is set."),
                new Instruction(0xef, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xf0, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xf1, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xf2, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xf3, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xf4, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xf5, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xf6, "set 6,(iy+o)", "", 4, TYPE.NONE, "Set bit 6 of of indexed addressed memory location (IY + o)", "Bit 6 of the memory location addressed by the content of the IX register plus the given offset value is set."),
                new Instruction(0xf7, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xf8, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xf9, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xfa, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xfb, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xfc, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xfd, "-", "", 4, TYPE.NONE, "-", "-"),
                new Instruction(0xfe, "set 7,(iy+o)", "", 4, TYPE.NONE, "Set bit 7 of of indexed addressed memory location (IY + o)", "Bit 7 of the memory location addressed by the content of the IX register plus the given offset value is set."),
                new Instruction(0xff, "-", "", 4, TYPE.NONE, "-", "-")
            };

            #endregion
        }
    }

    #endregion
}
